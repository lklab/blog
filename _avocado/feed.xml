<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-08T21:58:51+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lklab</title><subtitle>Reality and Theory</subtitle><author><name>khlee</name></author><entry><title type="html">SOEM을 활용하여 라즈베리파이를 EtherCAT 마스터로 만들기</title><link href="http://localhost:4000/blog/SOEM%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4%EB%A5%BC-EtherCAT-%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/" rel="alternate" type="text/html" title="SOEM을 활용하여 라즈베리파이를 EtherCAT 마스터로 만들기" /><published>2017-07-17T00:00:00+09:00</published><updated>2017-07-17T00:00:00+09:00</updated><id>http://localhost:4000/blog/SOEM%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4%EB%A5%BC-EtherCAT-%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/blog/SOEM%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4%EB%A5%BC-EtherCAT-%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/"><![CDATA[<p>라즈베리파이에 SOEM을 설치하여 EtherCAT 마스터로 동작하도록 할 것이다.
라즈베리파이는 B+ 모델을 사용했으며, OS로 2017년 03월 02일 버전 raspbian-jessie를 사용했다.</p>

<h2 id="준비하기">준비하기</h2>

<p>먼저 최신 버전의 SOEM을 다운로드 받는다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone https://github.com/OpenEtherCATsociety/SOEM</code></pre></figure>

<p><a href="http://openethercatsociety.github.io/">http://openethercatsociety.github.io/</a> 에서 받을 수 있는 1.3.1 버전에서는 make 기반으로 빌드가 가능했었는데, git에서 받은 버전은 cmake 기반으로 빌드를 한다.</p>

<p>사용하는 라즈베리파이에는 cmake가 설치되어있지 않으니 현재 최신 릴리즈 버전인 3.8.2 버전으로 설치했다. [<a href="https://cmake.org/install/">참고</a>]</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget https://cmake.org/files/v3.8/cmake-3.8.2.tar.gz
<span class="nv">$ </span><span class="nb">tar</span> <span class="nt">-xvzf</span> cmake-3.8.2.tar.gz
<span class="nv">$ </span><span class="nb">cd </span>cmake-3.8.2/
<span class="nv">$ </span>./bootstrap
<span class="nv">$ </span>make
<span class="nv">$ </span>make <span class="nb">install</span></code></pre></figure>

<p>라즈베리파이가 구닥다리라 엄청 오래 걸렸다..</p>

<p>이제 <a href="https://github.com/OpenEtherCATsociety/SOEM">README.md</a>에 나와있는 방법대로 SOEM 빌드를 한다!</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd </span>SOEM
<span class="nv">$ </span><span class="nb">mkdir </span>build
<span class="nv">$ </span><span class="nb">cd </span>build
<span class="nv">$ </span>cmake ..
<span class="nv">$ </span>make</code></pre></figure>

<p>빌드하고 나면 몇 가지 예제 프로그램이 생성되는데 그 중 SOEM/build/test/linux/simple_test/ 경로에 있는 simple_test라는 프로그램을 실행할 것이다.</p>

<p>그 전에 하드웨어 세팅을 시작하자.
구닥다리 라즈베리파이 B+에는 wifi가 기본 내장되어있지 않아서 ssh를 쓰기 위해 wifi 동글을 사용했다. 따라서 네트워크 인터페이스가 wlan0, eth0 두 개가 되는데, wlan0은 ssh를 포함한 인터넷을, eth0은 EtherCAT 포트로 사용한다.</p>

<p>EtherCAT 슬레이브로 사용할 장치는 Beckhoff사의 EL9800 보드로 하였다.
EtherCAT을 통해 제어 가능한 각 8개의 On-board LED와 스위치가 있다.</p>

<p><img src="/blog/assets/post/17-07-17-EtherCAT/20170529_143851.jpg" alt="Beckhoff EL9800" /></p>

<p>이제 예제 프로그램을 실행한다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd test</span>/linux/simple_test/
<span class="nv">$ </span>./simple_test eth0</code></pre></figure>

<p>실행시키면 다음 그림과 같이 PDO 값에 대해 모니터링해 준다.</p>

<p><img src="/blog/assets/post/17-07-17-EtherCAT/pdo.png" alt="pdo" /></p>

<p><code class="highlighter-rouge">O:</code> 뒤에 첫 1바이트가 LED를 의미하고, <code class="highlighter-rouge">I:</code> 뒤의 첫 1바이트가 스위치를 의미한다.</p>

<h2 id="제어-프로그램-만들기">제어 프로그램 만들기</h2>

<p>그냥 실행만 시키면 재미없으니 LED에 불을 켜 보자!</p>

<p>SOEM/test/linux/simple_test/simple_test.c 파일을 열어서 PDO 교환을 수행하는 다음 코드를 보면</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/* cyclic loop */</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ec_send_processdata</span><span class="p">();</span>
    <span class="n">wkc</span> <span class="o">=</span> <span class="n">ec_receive_processdata</span><span class="p">(</span><span class="n">EC_TIMEOUTRET</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="n">wkc</span> <span class="o">&gt;=</span> <span class="n">expectedWKC</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Processdata cycle %4d, WKC %d , O:"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">wkc</span><span class="p">);</span>

        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">oloop</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">" %2.2x"</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">ec_slave</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">outputs</span> <span class="o">+</span> <span class="n">j</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="n">printf</span><span class="p">(</span><span class="s">" I:"</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">iloop</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">" %2.2x"</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">ec_slave</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">inputs</span> <span class="o">+</span> <span class="n">j</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">" T:%"</span><span class="n">PRId64</span><span class="s">"</span><span class="se">\r</span><span class="s">"</span><span class="p">,</span><span class="n">ec_DCtime</span><span class="p">);</span>
        <span class="n">needlf</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">osal_usleep</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">ec_slave[0].outputs + offset</code>이 출력(마스터 -&gt; 슬레이브) PDO, 그러니까 RxPDO를 의미하고 <code class="highlighter-rouge">ec_slave[0].inputs + offset</code>이 TxPDO를 의미한다.</p>

<p>LED는 RxPDO의 첫 번째 바이트로 다음 변수를 통해 접근할 수 있다.</p>

<p><code class="highlighter-rouge">ec_slave[0].outputs + 0</code></p>

<p>정확한 내 장치의 SII에 저장된 PDO 목록을 보고싶다면 같이 빌드되는 예제 프로그램인 slaveinfo를 실행해보면 안다. 다음 명령어를 실행하면</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>./slaveinfo eth0 <span class="nt">-map</span></code></pre></figure>

<p><img src="/blog/assets/post/17-07-17-EtherCAT/slaveinfo.png" alt="pdo" /></p>

<p>슬레이브의 SII에 저장된 PDO 매핑 정보가 출력되어 나온다.</p>

<p>다시 LED를 제어하는 것으로 돌아와서!
위 코드의 <code class="highlighter-rouge">for</code> 블록문 첫 번째에 다음 코드를 넣었다.
물론 함수의 첫 부분에 int형 <code class="highlighter-rouge">ledval</code>(초기값 0x1)과 <code class="highlighter-rouge">tick</code> 변수(초기값 0x0)를 선언하였다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/* cyclic loop */</span>
<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* for LED output test */</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">++</span><span class="n">tick</span> <span class="o">%</span> <span class="mi">50</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">ledval</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ledval</span> <span class="o">&gt;=</span> <span class="mh">0x100</span><span class="p">)</span>
            <span class="n">ledval</span> <span class="o">=</span> <span class="mh">0x1</span><span class="p">;</span>
        <span class="o">*</span><span class="p">(</span><span class="n">ec_slave</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">outputs</span><span class="p">)</span> <span class="o">=</span> <span class="n">ledval</span><span class="p">;</span>
        <span class="n">tick</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="cm">/* for LED output test */</span>
    <span class="n">ec_send_processdata</span><span class="p">();</span>
    <span class="n">wkc</span> <span class="o">=</span> <span class="n">ec_receive_processdata</span><span class="p">(</span><span class="n">EC_TIMEOUTRET</span><span class="p">);</span></code></pre></figure>

<p>이제 다시 build 디렉토리로 돌아와서 빌드한다.
다시 빌드할 때에는 make만 하면 된다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../../../build/
<span class="nv">$ </span>make</code></pre></figure>

<p>이제 실행시켜보면 된다.</p>

<iframe class="video" src="https://www.youtube.com/embed/CrT6T_HWt78" allowfullscreen="" frameborder="0"></iframe>]]></content><author><name>khlee</name></author><category term="EtherCAT" /><summary type="html"><![CDATA[라즈베리파이에 SOEM을 설치하여 EtherCAT 마스터로 동작하도록 할 것이다. 라즈베리파이는 B+ 모델을 사용했으며, OS로 2017년 03월 02일 버전 raspbian-jessie를 사용했다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-07-17-EtherCAT/20170529_143851.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/17-07-17-EtherCAT/20170529_143851.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>