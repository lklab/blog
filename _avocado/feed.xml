<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-21T21:16:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Avopado</title><subtitle>Reality and Theory</subtitle><author><name>khlee</name></author><entry><title type="html">Unity 2019.3 이상에서 Swift로 플러그인 개발하기</title><link href="http://localhost:4000/blog/Unity-plugin-in-swift/" rel="alternate" type="text/html" title="Unity 2019.3 이상에서 Swift로 플러그인 개발하기" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>http://localhost:4000/blog/Unity-plugin-in-swift</id><content type="html" xml:base="http://localhost:4000/blog/Unity-plugin-in-swift/"><![CDATA[<h2 id="개요">개요</h2>

<p>Unity에서는 iOS 네이티브와의 인터페이스를 Objective-C로만 제공한다. 따라서 Swift로 플러그인을 제작하려면 Objective-C가 Unity와 Swift를 연결해 주어야 한다. Unity 2019.2 버전까지는 Bridge Header를 활용해서 Objective-C와 Swift를 연동할 수 있었다.<br />
그러나 Unity 2019.3 버전에서 Unity as a Library가 도입되면서 플러그인이 Xcode 상에서 기존의 Unity-iPhone 타겟이 아닌 UnityFramework 타겟에 포함되는 것으로 바뀌었다.<br />
문제는 Bridge Header를 Framework 타겟에서 사용할 수 없다는 것이다. 따라서 Swift로 플러그인을 제작하려면 Bridge Header 외의 방법을 활용해야 한다.</p>

<h2 id="참고-자료">참고 자료</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/24875745/xcode-6-beta-4-using-bridging-headers-with-framework-targets-is-unsupported">https://stackoverflow.com/questions/24875745/xcode-6-beta-4-using-bridging-headers-with-framework-targets-is-unsupported</a></li>
  <li><a href="https://github.com/jwtan/SwiftToUnityExample">https://github.com/jwtan/SwiftToUnityExample</a></li>
</ul>

<h2 id="개발환경">개발환경</h2>

<ul>
  <li>OS: macOS Monterey 12.0.1</li>
  <li>Unity: 2020.3.19</li>
  <li>이 글에서 활용한 프로젝트: <a href="https://github.com/lklab/Swift-plugin-for-Unity-iOS">https://github.com/lklab/Swift-plugin-for-Unity-iOS</a></li>
</ul>

<h2 id="예제-프로그램">예제 프로그램</h2>

<ul>
  <li>UI 버튼이 눌리면 유니티는 네이티브 함수를 호출하여 Swift 함수를 실행한다.</li>
  <li>Swift 함수는 호출될 때마다 숫자를 1씩 더한 후 해당 숫자를 포함한 문자열을 유니티에 전달한다.</li>
  <li>유니티에서는 해당 문자열을 받아서 UI 텍스트를 업데이트한다.</li>
</ul>

<h2 id="unity에서-네이티브-인터페이스-스크립트-작성">Unity에서 네이티브 인터페이스 스크립트 작성</h2>

<p>NativeInterface.cs</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">NativeInterface</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">event</span> <span class="n">System</span><span class="p">.</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">OnNativeCall</span><span class="p">;</span>

<span class="cp">#if !UNITY_EDITOR &amp;&amp; UNITY_IOS
</span>    <span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"__Internal"</span><span class="p">)]</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">string</span> <span class="nf">CallPluginIOS</span><span class="p">();</span>
<span class="cp">#endif
</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CallPlugin</span><span class="p">()</span>
    <span class="p">{</span>
<span class="cp">#if UNITY_EDITOR
</span>        <span class="k">return</span> <span class="s">""</span><span class="p">;</span>
<span class="cp">#elif UNITY_IOS
</span>        <span class="k">return</span> <span class="nf">CallPluginIOS</span><span class="p">();</span>
<span class="cp">#else
</span>        <span class="k">return</span> <span class="s">""</span><span class="p">;</span>
<span class="cp">#endif
</span>    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">CallUnity</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">OnNativeCall</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>유니티 -&gt; 네이티브 호출</p>

<ul>
  <li><code class="highlighter-rouge">[DllImport("__Internal")]</code>를 사용해서 호출할 네이티브 함수를 선언한다. 이 때 함수명은 나중에 Objective-C에 선언할 함수명과 동일해야 한다.</li>
  <li>플랫폼에 독립적인 함수 <code class="highlighter-rouge">CallPlugin()</code>를 구현한다. Define symbol로 플랫폼을 구분한다. 여기서는 iOS 플랫폼에서 네이티브 함수인 <code class="highlighter-rouge">CallPluginIOS()</code>를 호출한다.</li>
  <li>여러 플랫폼을 지원하는 소프트웨어를 개발할 때 이 함수와 같이 플랫폼 의존적인 부분을 추상화하는 함수를 만들어 사용하는 것이 좋다.</li>
</ul>

<p>네이티브 -&gt; 유니티 호출</p>

<ul>
  <li>마지막으로 네이티브에서 호출될 함수로 <code class="highlighter-rouge">CallUnity()</code>를 구현한다. 네이티브에서 호출되는 함수이므로, <code class="highlighter-rouge">OnNativeCall</code>이라는 이벤트를 통해 다른 스크립트에 제공하도록 한다.</li>
  <li>네이티브에서 유니티의 함수를 호출하려면 <code class="highlighter-rouge">UnitySendMessage()</code>를 사용하는데, 여기에 게임오브젝트 이름과 함수명이 필요하다. 따라서 이  스크립트를 포함하는 게임오브젝트와 함수명을 기억해 두었다가 Objective-C에 작성해야 한다.</li>
</ul>

<h2 id="네이티브-플러그인-작성---objective-c">네이티브 플러그인 작성 - Objective-C</h2>

<p>objc_bridge.h</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="k">@interface</span> <span class="nc">ObjcBridge</span> <span class="p">:</span> <span class="nc">NSObject</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sendMessage</span><span class="p">:</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">message</span><span class="p">;</span>

<span class="k">@end</span></code></pre></figure>

<p>objc_bridge.mm</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="cp">#import "objc_bridge.h"
#import "UnityFramework/UnityFramework-Swift.h"
</span>
<span class="k">extern</span> <span class="s">"C"</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">CallPluginIOS</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">NSString</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="p">[</span><span class="n">SwiftPlugin</span> <span class="nf">callPlugin</span><span class="p">];</span>
        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">nsStringUtf8</span> <span class="o">=</span> <span class="p">[</span><span class="n">ret</span> <span class="nf">UTF8String</span><span class="p">];</span>
        <span class="kt">char</span><span class="o">*</span> <span class="n">cString</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">nsStringUtf8</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">strcpy</span><span class="p">(</span><span class="n">cString</span><span class="p">,</span> <span class="n">nsStringUtf8</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">cString</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">unitySendMessage</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">message</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">UnitySendMessage</span><span class="p">(</span><span class="s">"NativeInterface"</span><span class="p">,</span> <span class="s">"CallUnity"</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">@implementation</span> <span class="nc">ObjcBridge</span>
    
<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">sendMessage</span><span class="p">:</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">message</span>
<span class="p">{</span>
    <span class="n">unitySendMessage</span><span class="p">([</span><span class="n">message</span> <span class="nf">UTF8String</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">@end</span></code></pre></figure>

<p>유니티 -&gt; Objective-C -&gt; Swift</p>

<ul>
  <li>유니티와의 인터페이스 역할을 할 함수들은 <code class="highlighter-rouge">extern "C"</code> 안에 선언한다.</li>
  <li>유니티에서 호출될 함수는 함수명, 리턴타입, 파라미터를 맞춰서 선언한다. 여기서는 유니티에서 <code class="highlighter-rouge">string CallPluginIOS();</code>로 선언하였으므로 리턴 타입을 <code class="highlighter-rouge">string</code>에 대응하는 <code class="highlighter-rouge">const char*</code>로 한다.</li>
  <li>다음으로 Swift 함수를 호출한다. Swift에 선언된 심볼들을 참조하기 위해서는 UnityFramework/UnityFramework-Swift.h를 import해야 한다.</li>
  <li>Swift 함수에서 리턴된 <code class="highlighter-rouge">NSString</code>을 <code class="highlighter-rouge">const char*</code> 로 바꾸기 위해 <code class="highlighter-rouge">UTF8String</code> 함수를 사용한다.</li>
  <li>이 문자열을 그대로 리턴하면 제대로 동작하지 않으므로 새로운 메모리를 할당한 후 거기에 문자열을 복사하여 리턴한다.<br />
참고: <a href="https://stackoverflow.com/questions/37047781/how-to-return-string-from-native-ios-plugin-to-unity">https://stackoverflow.com/questions/37047781/how-to-return-string-from-native-ios-plugin-to-unity</a></li>
</ul>

<p>Swift -&gt; Objective-C -&gt; 유니티</p>

<ul>
  <li>Swift에서 호출할 <code class="highlighter-rouge">sendMessage()</code> 함수를 헤더파일과 mm 파일에 선언한다.</li>
  <li>이 함수는 <code class="highlighter-rouge">extern "C"</code> 안에 선언된 <code class="highlighter-rouge">unitySendMessage()</code>를 호출한다.</li>
  <li><code class="highlighter-rouge">unitySendMessage()</code>는 <code class="highlighter-rouge">UnitySendMessage()</code>를 사용하여 유니티의 함수를 호출한다.
    <ul>
      <li>이 때 첫 번째 인자로 호출할 함수가 선언된 스크립트가 컴포넌트로 들어있는 게임오브젝트 이름을 전달한다.</li>
      <li>두 번째 인자는 호출할 함수 이름을 전달한다.</li>
      <li>마지막으로 유니티에 전달하고 싶은 문자열을 전달한다. 이 문자열을 전달하기 위해 <code class="highlighter-rouge">sendMessage()</code>, <code class="highlighter-rouge">unitySendMessage()</code> 함수는 각각 <code class="highlighter-rouge">NSString*</code>과 <code class="highlighter-rouge">const char*</code>를 파라미터로 받는다.</li>
    </ul>
  </li>
</ul>

<h2 id="네이티브-플러그인-작성---swift">네이티브 플러그인 작성 - Swift</h2>

<p>SwiftPlugin.swift</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">@objc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="kt">SwiftPlugin</span><span class="p">:</span> <span class="kt">NSObject</span>
<span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="kd">@objc</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">callPlugin</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span>
    <span class="p">{</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">ObjcBridge</span><span class="o">.</span><span class="nf">sendMessage</span><span class="p">(</span><span class="s">"count is "</span> <span class="o">+</span> <span class="kt">String</span><span class="p">(</span><span class="n">count</span><span class="p">));</span>
        <span class="k">return</span> <span class="s">"Hello, I'm swift."</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Objective-C -&gt; Swift</p>

<ul>
  <li>Objective-C에서 참조할 심볼들은 모두 <code class="highlighter-rouge">@objc</code> 및 <code class="highlighter-rouge">public</code>으로 해야 한다.</li>
</ul>

<p>Swift -&gt; Objective-C</p>

<ul>
  <li>Swift에서 Objective-C를 참조하려면 Bridge Header를 쓰지 못하기 때문에 약간 복잡하다. 여기서는 Bridge Header 대신 <a href="https://stackoverflow.com/questions/31238761/what-is-an-umbrella-header/31238936">Umbrella header</a>를  사용할 것이다.</li>
  <li>Xcode에서 /UnityFramework/UnityFramework.h 파일을 열고 가장 아랫줄에 앞서 작성했던 objc_bridge.h 헤더파일을 import한다.</li>
</ul>

<p><img src="/blog/assets/post/21-12-12-Unity-plugin-in-swift/import_header.png" alt="import header" /></p>

<ul>
  <li>다음으로 UnityFramework 타겟의 Build Phases 섹션에서 Headers 카테고리의 Public에 objc_bridge.h 헤더파일을 추가한다.</li>
</ul>

<p><img src="/blog/assets/post/21-12-12-Unity-plugin-in-swift/build_phases.png" alt="build phases" /></p>

<ul>
  <li>그 다음에는 ObjcBridge 클래스의 sendMessage() 함수를 호출하여 최종적으로 유니티의 함수를 호출한다.</li>
</ul>

<h2 id="테스트용-스크립트-작성-및-테스트">테스트용 스크립트 작성 및 테스트</h2>

<p>SampleScript.cs</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine.UI</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SampleScript</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span> <span class="k">private</span> <span class="n">Button</span> <span class="n">_button</span><span class="p">;</span>
    <span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span> <span class="k">private</span> <span class="n">Text</span> <span class="n">_test</span><span class="p">;</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">Awake</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_button</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="nf">AddListener</span><span class="p">(</span><span class="k">delegate</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">ret</span> <span class="p">=</span> <span class="n">NativeInterface</span><span class="p">.</span><span class="nf">CallPlugin</span><span class="p">();</span>
            <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Call plugin returns: "</span> <span class="p">+</span> <span class="n">ret</span><span class="p">);</span>
        <span class="p">});</span>

        <span class="n">NativeInterface</span><span class="p">.</span><span class="n">OnNativeCall</span> <span class="p">+=</span> <span class="n">message</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="n">_test</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<ul>
  <li>UI 버튼의 <code class="highlighter-rouge">onClick</code> 이벤트가 발생하면 네이티브 함수 <code class="highlighter-rouge">CallPlugin()</code> 함수를 호출한 후, 그 함수의 리턴값을 로깅한다.</li>
  <li>네이티브에서 <code class="highlighter-rouge">UnitySendMessage()</code>를 사용하여 <code class="highlighter-rouge">NativeInterface.CallUnity()</code> 함수가 호출될 때의 이벤트(<code class="highlighter-rouge">NativeInterface.OnNativeCall</code>)로 메시지를 받으면 UI 텍스트에서 해당 메시지를 출력한다.</li>
</ul>

<p>테스트 영상</p>

<iframe class="video" src="https://www.youtube.com/embed/fGLlCfHZARA" allowfullscreen="" frameborder="0"></iframe>

<p>로그를 통해 Swift에서 리턴한 메시지도 잘 출력되는 것을 확인할 수 있다.</p>

<p><img src="/blog/assets/post/21-12-12-Unity-plugin-in-swift/result.png" alt="result" /></p>

<h2 id="빌드-스크립트">빌드 스크립트</h2>

<p>앞서 진행했던 Umbrella header 관련 작업을 아래와 같은 빌드 스크립트를 통해 자동화할 수 있다.</p>

<p>BuildScript.cs</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEditor</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEditor.Callbacks</span><span class="p">;</span>
<span class="cp">#if UNITY_IOS
</span><span class="k">using</span> <span class="nn">UnityEditor.iOS.Xcode</span><span class="p">;</span>
<span class="cp">#endif
</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">BuildScript</span>
<span class="p">{</span>
<span class="cp">#if UNITY_IOS
</span>    <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">publicHeaderPaths</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span>
    <span class="p">{</span>
        <span class="s">"Libraries/Plugins/iOS/objc_bridge.h"</span><span class="p">,</span>
    <span class="p">};</span>

    <span class="p">[</span><span class="n">PostProcessBuild</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">OnPostProcessBuild</span><span class="p">(</span><span class="n">BuildTarget</span> <span class="n">buildTarget</span><span class="p">,</span> <span class="kt">string</span> <span class="n">buildPath</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">string</span> <span class="n">projPath</span> <span class="p">=</span> <span class="n">buildPath</span> <span class="p">+</span> <span class="s">"/Unity-iPhone.xcodeproj/project.pbxproj"</span><span class="p">;</span>
        <span class="n">PBXProject</span> <span class="n">proj</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PBXProject</span><span class="p">();</span>
        <span class="n">proj</span><span class="p">.</span><span class="nf">ReadFromFile</span><span class="p">(</span><span class="n">projPath</span><span class="p">);</span>

        <span class="kt">string</span> <span class="n">frameworkTarget</span> <span class="p">=</span> <span class="n">proj</span><span class="p">.</span><span class="nf">GetUnityFrameworkTargetGuid</span><span class="p">();</span>

        <span class="kt">string</span> <span class="n">unityFrameworkHeaderText</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="nf">ReadAllText</span><span class="p">(</span><span class="n">buildPath</span> <span class="p">+</span> <span class="s">"/UnityFramework/UnityFramework.h"</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">headerPath</span> <span class="k">in</span> <span class="n">publicHeaderPaths</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">headerGuid</span> <span class="p">=</span> <span class="n">proj</span><span class="p">.</span><span class="nf">FindFileGuidByProjectPath</span><span class="p">(</span><span class="n">headerPath</span><span class="p">);</span>
            <span class="n">proj</span><span class="p">.</span><span class="nf">AddPublicHeaderToBuild</span><span class="p">(</span><span class="n">frameworkTarget</span><span class="p">,</span> <span class="n">headerGuid</span><span class="p">);</span>

            <span class="kt">string</span> <span class="n">importStatement</span> <span class="p">=</span> <span class="s">"#import \""</span> <span class="p">+</span> <span class="n">Path</span><span class="p">.</span><span class="nf">GetFileName</span><span class="p">(</span><span class="n">headerPath</span><span class="p">)</span> <span class="p">+</span> <span class="s">"\""</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">unityFrameworkHeaderText</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">importStatement</span><span class="p">))</span>
                <span class="n">unityFrameworkHeaderText</span> <span class="p">+=</span> <span class="s">"\n"</span> <span class="p">+</span> <span class="n">importStatement</span> <span class="p">+</span> <span class="s">"\n"</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">File</span><span class="p">.</span><span class="nf">WriteAllText</span><span class="p">(</span><span class="n">buildPath</span> <span class="p">+</span> <span class="s">"/UnityFramework/UnityFramework.h"</span><span class="p">,</span> <span class="n">unityFrameworkHeaderText</span><span class="p">);</span>

        <span class="n">proj</span><span class="p">.</span><span class="nf">WriteToFile</span><span class="p">(</span><span class="n">projPath</span><span class="p">);</span>
    <span class="p">}</span>
<span class="cp">#endif
</span><span class="p">}</span></code></pre></figure>

<ul>
  <li><code class="highlighter-rouge">proj.ReadFromFile(projPath);</code>: Xcode 프로젝트 파일을 읽어온다.</li>
  <li><code class="highlighter-rouge">File.ReadAllText(buildPath + "/UnityFramework/UnityFramework.h");</code>: /UnityFramework/UnityFramework.h 파일을 열어서 텍스트를 읽어온다.</li>
  <li><code class="highlighter-rouge">proj.AddPublicHeaderToBuild(frameworkTarget, headerGuid);</code>: 헤더파일을 Build Phases에 public으로 등록한다.</li>
  <li><code class="highlighter-rouge">unityFrameworkHeaderText += "\n" + importStatement + "\n";</code>: /UnityFramework/UnityFramework.h 파일에 헤더파일을 import한다.</li>
  <li><code class="highlighter-rouge">proj.WriteToFile(projPath);</code>: 프로젝트 파일에 데이터를 쓴다.</li>
</ul>

<p>활용법</p>

<ul>
  <li>이제 빌드 시마다 추가로 해야 하는 작업은 없다.</li>
  <li>Swift에서 참조할 헤더파일이 추가될 경우 <code class="highlighter-rouge">publicHeaderPaths</code> 배열에 헤더파일의 경로를 추가하기만 하면 된다.</li>
</ul>]]></content><author><name>khlee</name></author><category term="Unity" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/21-12-12-Unity-plugin-in-swift/title.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/post/21-12-12-Unity-plugin-in-swift/title.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JNI 객체 사용과 메모리 관리</title><link href="http://localhost:4000/blog/Object_and_memory/" rel="alternate" type="text/html" title="JNI 객체 사용과 메모리 관리" /><published>2018-07-04T00:00:00+09:00</published><updated>2018-07-04T00:00:00+09:00</updated><id>http://localhost:4000/blog/Object_and_memory</id><content type="html" xml:base="http://localhost:4000/blog/Object_and_memory/"><![CDATA[<h2 id="개요">개요</h2>

<p>JNI를 통해 C에서 Java의 객체에 접근할 수 있고 자유롭게 생성할 수 있다. 그러나 C에서 접근했거나 생성한 객체가 여전히 C에서 참조를 갖고 있는지 알 수 없으므로, garbage collector가 이러한 객체를 어떻게 처리할지 알 수 없게 된다. 이를 위해 JNI는 C에서 해당 객체에 대한 참조를 명시적으로 제거할 수 있는 함수를 제공하여 garbage collector가 잘 동작할 수 있도록 메커니즘이 마련되어 있다.</p>

<p>이번 글에서는 C에서 Java 객체를 사용하는 방법과, 메모리 관리 방법을 소개한다.</p>

<h2 id="참고-자료">참고 자료</h2>

<p><a href="https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.200/files/staff/domaschka/misc/jni_programmers_guide_spec.pdf">The Java Native Interface: Programmer’s Guide and Specification</a></p>

<h2 id="string">String</h2>

<p>C에서 String을 처리할 수 있는 함수는 다음과 같다.</p>

<p><img src="/blog/assets/post/18-07-04-Object_and_memory/string.png" alt="string functions" /></p>

<p>다음과 같이 사용할 수 있다.</p>

<p>Hello.java</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kd">native</span> <span class="nc">String</span> <span class="nf">getText</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>hello.c</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
<span class="nf">Java_Hello_getText</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">;</span>

    <span class="cm">/* get string from java String object */</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">msg</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* OutOfMemoryError already thrown */</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"received from java : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>

    <span class="cm">/* free the memory allocated for msg */</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>

    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>

    <span class="cm">/* create java String object */</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buff</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Java String은 <code class="highlighter-rouge">GetStringUTFChars()</code> 함수를 통해 C 문자열(캐릭터의 배열)로 가져올 수 있다.<br />
가져온 문자열은 사용이 모두 끝난 후에 <code class="highlighter-rouge">ReleaseStringUTFChars()</code> 함수를 통해 할당된 메모리 영역을 반환해야 한다.</p>

<p>C 문자열로부터 <code class="highlighter-rouge">NewStringUTF()</code> 함수를 통해 java String 객체를 생성할 수 있다.<br />
이를 통해 생성된 객체는 전적으로 java에서만 사용되는 것으로 간주되며, C에서 참조를 갖고 있더라도 garbage collector가 이를 확인하지 않으므로, java에서의 참조만 없다면 해당 객체는 제거될 수 있다.</p>

<h2 id="object-construction">Object construction</h2>

<p>객체를 생성하는 순서는 다음과 같다.</p>
<ol>
  <li>생성할 객체의 class를 얻는다.</li>
  <li>생성자(constructor)를 얻는다.</li>
  <li>생성자 매개변수와 함께 객체를 생성한다.</li>
</ol>

<p>다음은 사용 예이다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">JNIEXPORT</span> <span class="n">jobject</span> <span class="n">JNICALL</span>
<span class="nf">Java_Hello_getObject</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">jClass</span> <span class="n">class</span><span class="p">;</span>
    <span class="n">jmethodID</span> <span class="n">constructor</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">parameter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">jobject</span> <span class="n">result</span><span class="p">;</span>

    <span class="cm">/* get class */</span>
    <span class="n">class</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/lang/Integer"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">class</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="cm">/* get constructor */</span>
    <span class="n">constructor</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetMethodID</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">class</span><span class="p">,</span> <span class="s">"&lt;init&gt;"</span><span class="p">,</span> <span class="s">"(I)V"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">constructor</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="cm">/* construct object */</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewObject</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">class</span><span class="p">,</span> <span class="n">constructor</span><span class="p">,</span> <span class="n">parameter</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">FindClass()</code> 함수를 통해 특정 클래스를 얻어올 수 있다. 두 번째 매개변수로 얻어올 클래스의 패키지 경로를 포함한 전체 이름을 적는다.</p>

<p><code class="highlighter-rouge">GetMethodID()</code> 함수는 특정 클래스의 메소드를 얻어오는 함수이다. 원래 세 번째 매개변수에는 메소드의 이름, 네 번째 매개변수에는 메소드의 시그니처를 넣어야 하지만, 생성자를 얻어올 경우 메소드의 이름을 <code class="highlighter-rouge">&lt;init&gt;</code>으로, 시그니처의 반환 타입은 <code class="highlighter-rouge">void</code>를 의미하는 <code class="highlighter-rouge">V</code>로 고정해야 한다.</p>

<p>메소드 시그니처는 메소드의 반환 타입과 매개변수들의 타입을 문자열로 정의한 것으로 “({매개변수}){반환타입}” 형식이다.</p>

<p>각각 java 타입에 해당하는 시그니처는 다음과 같다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Type</th>
      <th style="text-align: center">Signature</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">void</td>
      <td style="text-align: center">V</td>
    </tr>
    <tr>
      <td style="text-align: center">boolean</td>
      <td style="text-align: center">Z</td>
    </tr>
    <tr>
      <td style="text-align: center">byte</td>
      <td style="text-align: center">B</td>
    </tr>
    <tr>
      <td style="text-align: center">char</td>
      <td style="text-align: center">C</td>
    </tr>
    <tr>
      <td style="text-align: center">int</td>
      <td style="text-align: center">I</td>
    </tr>
    <tr>
      <td style="text-align: center">long</td>
      <td style="text-align: center">J</td>
    </tr>
    <tr>
      <td style="text-align: center">float</td>
      <td style="text-align: center">F</td>
    </tr>
    <tr>
      <td style="text-align: center">double</td>
      <td style="text-align: center">D</td>
    </tr>
    <tr>
      <td style="text-align: center">object</td>
      <td style="text-align: center">L{패키지 경로를 포함한 클래스 전체 이름};</td>
    </tr>
    <tr>
      <td style="text-align: center">type[]</td>
      <td style="text-align: center">[{해당 타입의 시그니처}</td>
    </tr>
  </tbody>
</table>

<p>예를 들어서</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">void aaa() -&gt; ()V
int bbb(boolean a, char, b) -&gt; (ZC)I
String[] ccc(int[] c, MyClass d) -&gt; ([ILmyPackage/MyClass;)[Ljava/lang/String;</code></pre></figure>

<p>이 된다.</p>

<p>마지막으로 <code class="highlighter-rouge">NewObject()</code> 함수를 통해 해당 객체를 생성한다. 4번째 파라미터부터는 지정된 생성자의 파라미터로 사용될 변수를 순서대로 넣으면 된다. 만약 생성자의 파라미터가 두 개라면 4번째 파라미터에 생성자의 1번째 파라미터, 5번째 파라미터에 생성자의 2번째 파라미터를 넣으면 된다.</p>

<h2 id="array">Array</h2>

<p>다음은 배열을 처리하는 함수들이다.</p>

<p><img src="/blog/assets/post/18-07-04-Object_and_memory/array.png" alt="array functions" /></p>

<p><code class="highlighter-rouge">&lt;Type&gt;</code>에 원하는 배열 타입을 입력하면 된다. 예를 들어 int 배열을 생성하고 싶은 경우 <code class="highlighter-rouge">NewIntArray()</code> 함수를 사용한다.</p>

<p><code class="highlighter-rouge">Get&lt;Type&gt;ArrayRegion()</code> 함수와 <code class="highlighter-rouge">Get&lt;Type&gt;ArrayElements()</code> 함수는 모두 배열의 값을 얻어올 수 있다는 공통점이 있지만 사용 방법이 다르다.</p>

<p><code class="highlighter-rouge">Get&lt;Type&gt;ArrayRegion()</code> 함수는 다음과 같이 얻어올 메모리 영역이 미리 확보되어 있을 때 사용한다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_Hello_sumArray</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">arr</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* get int array data */</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayRegion</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>반면 <code class="highlighter-rouge">Get&lt;Type&gt;ArrayElements()</code> 함수는 메모리 영역이 확보된 배열 포인터를 반환한다. 따라서 해당 포인터를 모두 사용하고 난 다음에는 <code class="highlighter-rouge">Release&lt;Type&gt;ArrayElements()</code> 함수를 통해 해당 메모리 영역을 반환해야 한다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
<span class="nf">Java_Hello_sumArray</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">arr</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="cm">/* get int array data */</span>
    <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">arr</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">buf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

    <span class="cm">/* release int array memory */</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">arr</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="deletelocalref">DeleteLocalRef()</h2>

<p>만약 C에서 객체를 생성하였는데, Java로 반환되지도 않고 더 이상 사용되지 않는다면 <code class="highlighter-rouge">DeleteLocalRef()</code> 함수를 통해 반드시 해당 객체에 대한 참조를 지워야 한다.</p>

<p>예를 들어 다음과 같이 object array를 만드는 경우에 배열의 각 요소는 배열에 넣은 후 반환되지 않고 더 이상 사용되지 않는다. 이 때 <code class="highlighter-rouge">DeleteLocalRef()</code> 함수를 호출해야 한다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">JNIEXPORT</span> <span class="n">jobjectArray</span> <span class="n">JNICALL</span>
<span class="nf">Java_Hello_getNameList</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
    <span class="n">jstring</span> <span class="n">name</span><span class="p">;</span>

    <span class="n">jclass</span> <span class="n">stringClass</span><span class="p">;</span>
    <span class="n">jobjectArray</span> <span class="n">nameList</span><span class="p">;</span>

    <span class="cm">/* construct String array */</span>
    <span class="n">stringClass</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">"java/lang/String"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">stringClass</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">nameList</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewObjectArray</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">stringClass</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">nameList</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"enter 10 names</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>

        <span class="cm">/* construct new String */</span>
        <span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">name</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

        <span class="cm">/* insert String to array */</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">SetObjectArrayElement</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">nameList</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">jobject</span><span class="p">)</span><span class="n">name</span><span class="p">);</span>

        <span class="cm">/* delete local reference */</span>
        <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DeleteLocalRef</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">nameList</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name>khlee</name></author><category term="JNI" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/18-07-04-Object_and_memory/title.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/post/18-07-04-Object_and_memory/title.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">JNI로 C와 Java 연동하기</title><link href="http://localhost:4000/blog/JNI/" rel="alternate" type="text/html" title="JNI로 C와 Java 연동하기" /><published>2018-06-22T00:00:00+09:00</published><updated>2018-06-22T00:00:00+09:00</updated><id>http://localhost:4000/blog/JNI</id><content type="html" xml:base="http://localhost:4000/blog/JNI/"><![CDATA[<h2 id="개요">개요</h2>

<p>Java를 사용하면 하드웨어나 OS의 대부분 기능을 제한 없이 사용할 수 있지만 그래도 C와 같은 저수준의 언어보다 섬세할 수는 없다. 이를 해소하기 위해 Java와 C/C++ 사이에 인터페이스를 제공하는 것이 JNI(Java Native Interface)이다.</p>

<p>주로 JNI는 다음과 같은 이유로 사용된다.</p>
<ol>
  <li>이미 C/C++로 작성된 라이브러리를 Java에서 활용하기 위해</li>
  <li>처리속도 향상을 위해</li>
  <li>하드웨어나 OS의 기능 중 Java에서 아직 제공하지 않는 기능을 사용하기 위해</li>
</ol>

<h2 id="참고-자료">참고 자료</h2>

<p><a href="https://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.200/files/staff/domaschka/misc/jni_programmers_guide_spec.pdf">The Java Native Interface: Programmer’s Guide and Specification</a></p>

<h2 id="개발-과정">개발 과정</h2>

<h3 id="java에서-native-method-선언">Java에서 native method 선언</h3>

<p>먼저 Java에서 native method를 선언한다.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">helloJNI</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloJNI</span>
<span class="o">{</span>
    <span class="kd">static</span>
    <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">"hellojni"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">native</span> <span class="nc">String</span> <span class="nf">printHello</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="nc">HelloJNI</span> <span class="n">helloJNI</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelloJNI</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello, from "</span> <span class="o">+</span> <span class="n">helloJNI</span><span class="o">.</span><span class="na">printHello</span><span class="o">(</span><span class="s">"Java"</span><span class="o">)</span> <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>native method는 <code class="highlighter-rouge">native</code> 키워드로 선언할 수 있으며, abstract method처럼 내용을 구현하지 않고 세미콜론으로 끝낸다.</p>

<p>native method는 런타임에 C로 작성된 공유 라이브러리의 함수를 호출하여 동작하므로 공유 라이브러리 파일이 필요하다. 이것은 <code class="highlighter-rouge">System.loadLibrary()</code> 메소드를 통해 이루어질 수 있으며, 인자로 공유 라이브러리의 이름이 들어간다.<br />
위의 예에서 공유 라이브러리 이름은 <code class="highlighter-rouge">hellojni</code>이며, 이에 해당하는 공유 라이브러리 파일의 이름은 Windows에서 “hellojni.dll”이고, Linux에서 “libhellojni.so”이다.</p>

<h3 id="header-file-생성하기">Header file 생성하기</h3>

<p>C로 JNI를 통해 Java에 제공할 함수를 만들기 전에, Java에서 이해할 수 있는 함수 프로토타입이 선언된 헤더 파일을 생성해야 한다.<br />
헤더 파일은 JDK 내에 포함된 실행 파일인 javah를 통해 생성할 수 있다.</p>

<p><a href="http://blog.naver.com/PostView.nhn?blogId=matoker&amp;logNo=220515287208&amp;categoryNo=7&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=1&amp;postListTopCurrentPage=1&amp;from=postView">eclipse를 사용하여 간단히 javah를 사용하는 방법</a>도 있지만 여기서는 명령행에서 사용하는 방법을 소개한다.</p>

<p>javah는 간단히 다음과 같이 사용할 수 있다.</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="o">&gt;</span> <span class="kd">javah</span><span class="err">.exe</span> <span class="o">[</span>패키지명<span class="o">]</span>.<span class="o">[</span>클래스명<span class="o">]</span></code></pre></figure>

<p>만약 이 명령어를 호출하는 디렉토리에 컴파일된 Java 패키지가 없는 경우에는 다음과 같이 경로를 지정해줄 수 있다.</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="o">&gt;</span> <span class="kd">javah</span><span class="err">.exe</span> <span class="na">-classpath </span>.<span class="o">;[</span>경로<span class="o">]</span> <span class="o">[</span>패키지명<span class="o">]</span>.<span class="o">[</span>클래스명<span class="o">]</span></code></pre></figure>

<p>경로에는 eclipse로 개발하는 경우 프로젝트의 bin 디렉토리의 경로를 입력하면 된다.</p>

<p>”.;”는 .class 파일을 검색할 디렉토리에 현재 디렉토리를 추가한다는 의미로 여기서는 없어도 무방하다. 여러 디렉토리에 대해 검색하고 싶은 경우 여러 경로를 세미콜론으로 구분하면 된다.</p>

<p>그 밖에 다른 유용한 옵션은 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javah.html">여기</a>를 참고하자.</p>

<p>이번 예에서는 다음과 같이 헤더 파일을 생성하였다. (eclipse project의 bin 디렉토리 내에서 실행)</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="o">&gt;</span> <span class="kd">javah</span><span class="err">.exe</span> <span class="kd">helloJNI</span>.HelloJNI</code></pre></figure>

<p>이렇게 하면 현재 작업 디렉토리에 “helloJNI_HelloJNI.h”이라는 이름의 헤더 파일이 생성된다. [패키지명]_[클래스명].h 형식이며, 패키지 경로의 구분자 ‘.’은 ‘_‘로 대체된다.</p>

<p>다음은 생성된 헤더 파일이다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
<span class="cp">#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">
</span><span class="cm">/* Header for class helloJNI_HelloJNI */</span>

<span class="cp">#ifndef _Included_helloJNI_HelloJNI
#define _Included_helloJNI_HelloJNI
#ifdef __cplusplus
</span><span class="k">extern</span> <span class="s">"C"</span> <span class="p">{</span>
<span class="cp">#endif
</span><span class="cm">/*
 * Class:     helloJNI_HelloJNI
 * Method:    printHello
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */</span>
<span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_helloJNI_HelloJNI_printHello</span>
  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jstring</span><span class="p">);</span>

<span class="cp">#ifdef __cplusplus
</span><span class="p">}</span>
<span class="cp">#endif
#endif</span></code></pre></figure>

<p>여기에 선언된 “Java_helloJNI_HelloJNI_printHello()” 함수를 구현하면 된다.</p>

<h3 id="c언어로-jni를-통해-java에-제공할-함수-구현">C언어로 JNI를 통해 Java에 제공할 함수 구현</h3>

<p>이렇게 구현했다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;jni.h&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">"helloJNI_HelloJNI.h"</span><span class="cp">
</span>
<span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="nf">Java_helloJNI_HelloJNI_printHello</span>
    <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">msg</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">buf</span> <span class="o">=</span> <span class="s">"C world"</span><span class="p">;</span>

    <span class="n">msg</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">msg</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* error occurred */</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, from %s.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>

    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>“jni.h” 파일을 include해야 하며, 이전 순서에서 생성한 헤더 파일도 include해야 한다.</p>

<p>위의 예제는 인자로 받은 String을 출력한 다음 다른 String을 return한다.</p>

<p>C에서 String을 포함한 Java object를 다루는 방법은 <a href="https://lklab.github.io/blog/blog/Object_and_memory/">다음 글</a>에서 설명한다.</p>

<p>이제 빌드하여 공유 라이브러리 파일을 생성한다.</p>

<h3 id="공유-라이브러리-빌드-및-실행">공유 라이브러리 빌드 및 실행</h3>

<p>그냥 빌드해서 공유 라이브러리를 생성하면 된다. 방법은 다양하다.<br />
플랫폼에 따라 Visual studio를 사용해도 되고 mingw나 gcc를 사용해도 된다.</p>

<p>그러나 Java의 범용성을 활용하기 위해서는 여러 플랫폼에서, 또는 한 플랫폼에서 여러 플랫폼을 타겟으로 빌드하는 환경을 만들어 놓는 것이 좋다.<br />
그래서 여기서도 <a href="https://cmake.org/">CMake</a>를 사용할 것이다.</p>

<p>CMake를 사용하면 단 한번의 빌드 형상 정의를 통해 <a href="https://lklab.github.io/blog/blog/cmake/">여러 플랫폼에서 빌드</a>할 수도 있고 <a href="https://lklab.github.io/blog/blog/ARM-Linux-Cross-Compile/">크로스 컴파일을 통해 다른 플랫폼을 타겟으로 빌드</a>할 수 있다.</p>

<p>즉 이 글에서 정의한 빌드 형상(CMakeLists.txt) 파일 하나로 다양한 타겟의 공유 라이브러리를 쉽게 만들 수 있다.</p>

<p>이 예제에서 CMakeLists.txt 파일은 다음과 같다.</p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 2.8.4<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>WIN32<span class="p">)</span>
    <span class="nb">set</span><span class="p">(</span>JDK_ROOT <span class="s2">"D:/Program/Java/jdk1.8.0_172"</span><span class="p">)</span>
<span class="nb">elseif</span><span class="p">(</span>UNIX<span class="p">)</span>
    <span class="nb">set</span><span class="p">(</span>JDK_ROOT <span class="s2">"/usr/lib/jvm/java-8-openjdk-amd64"</span><span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">JDK_ROOT</span><span class="si">}</span>/include<span class="p">)</span>
<span class="nb">if</span><span class="p">(</span>WIN32<span class="p">)</span>
    <span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">JDK_ROOT</span><span class="si">}</span>/include/win32<span class="p">)</span>
<span class="nb">elseif</span><span class="p">(</span>UNIX<span class="p">)</span>
    <span class="nb">include_directories</span><span class="p">(</span><span class="si">${</span><span class="nv">JDK_ROOT</span><span class="si">}</span>/include/linux<span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nb">add_library</span><span class="p">(</span>hellojni SHARED hellojni.c<span class="p">)</span></code></pre></figure>

<p>시스템에 설치된 JDK의 루트 디렉토리로 설정하면 된다.</p>

<p>이 파일을 통해 빌드 형상은 다음과 같의 정의된다.</p>
<ol>
  <li>JDK 내에 있는 include 디렉토리와 그 안에 win32 디렉토리를 include directory 경로에 추가한다.</li>
  <li>공유 라이브러리로 빌드하기 위해 <code class="highlighter-rouge">add_library()</code>에 <code class="highlighter-rouge">SHARED</code> 옵션을 사용한다.</li>
  <li>이 때 공유 라이브러리 이름은 Java에서 <code class="highlighter-rouge">System.loadLibrary()</code> 메소드의 인자로 사용한 문자열과 동일해야 한다.</li>
</ol>

<p>Visual studio 등을 사용할 때에도 위와 같이 설정하면 된다. 즉 include directory 경로 추가와, 공유 라이브러리 빌드 설정을 하면 된다.</p>

<p>공유 라이브러리가 생성되었으면 이제 실행하면 된다.
단, 실행하기 전에 공유 라이브러리 파일의 경로는 각자 환경에 맞게 잘 설정해야 한다.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Hello, from C world.
Hello, from Java.</code></pre></figure>]]></content><author><name>khlee</name></author><category term="JNI" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/18-06-22-JNI/title.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/post/18-06-22-JNI/title.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">임베디드 환경에서 폰트 출력하기</title><link href="http://localhost:4000/blog/Font-Display/" rel="alternate" type="text/html" title="임베디드 환경에서 폰트 출력하기" /><published>2018-05-03T00:00:00+09:00</published><updated>2018-05-03T00:00:00+09:00</updated><id>http://localhost:4000/blog/Font-Display</id><content type="html" xml:base="http://localhost:4000/blog/Font-Display/"><![CDATA[<p>디스플레이에 문자열을 픽셀 단위로 처리하여 출력하는 알고리즘을 개발하기 위해 먼저 각 문자별로 비트맵이 정의된 C 배열이 필요하다.</p>

<p>C 배열을 구하기 위해 열심히 구글링을 하던 중 굉장한 것을 찾았다.</p>

<p><a href="https://www.mikroe.com/glcd-font-creator">https://www.mikroe.com/glcd-font-creator</a></p>

<p>GLCD Font Creator라는 프로그램인데, 시스템에 정의된 폰트와 스타일, 크기를 설정하면 그에 맞는 C 배열을 생성해 준다.</p>

<p>생성된 C 배열의 구조는 다음과 같다.</p>

<p><img src="/blog/assets/post/18-05-03-Font-Display/20180504_121423.png" alt="generated c array" /></p>

<p>C 배열에서 각각의 줄은 줄 끝에 주석으로 설명된 문자에 해당하는 비트맵이고 순서는 아스키 코드를 따른다.</p>

<p>각각의 줄에서 가장 첫 번째 바이트는 개별 비트맵의 가로 픽셀 길이를 의미한다. 모든 문자의 비트맵은 가로, 세로가 고정된 고정길이로 정의되는데 (그림 예시에서는 7x15 픽셀), 가변길이로 출력하고 싶은 경우 첫 번째 바이트를 보고 비트맵의 특정 부분만 추려서 출력하면 된다.</p>

<p>나머지는 비트맵인데, 왼쪽 위부터 세로로 8비트씩 한 바이트이고 바이트 index는 수직 방향이 우선이다. 한 바이트의 8개 픽셀에서 가장 위쪽 픽셀이 LSB이고 아래쪽 픽셀이 MSB이다.</p>

<p>예를 들어 ‘a’ 문자의 경우 첫 번째 바이트인 0x06은 비트맵 중 폰트가 정의된 가로 픽셀 수를 의미하고 나머지는 다음과 같이 비트맵 데이터를 담고 있다.</p>

<p><img src="/blog/assets/post/18-05-03-Font-Display/20180504_134433.png" alt="generated c array: a character" /></p>

<p><img src="/blog/assets/post/18-05-03-Font-Display/bit_align.png" alt="bit align" /></p>

<p>따라서 byte 3의 경우 0x06이고 이 값이 배열의 5번째 바이트(index=4)에 존재하는 것을 알 수 있다.</p>

<p>비트맵이 정의된 C 배열을 얻었으니 이제 이 배열을 해석하여 특정 픽셀에 값을 써 주는 알고리즘을 개발하면 된다. 다음은 그 코드이다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#define LCD_WIDTH 256
#define LCD_HEIGHT 64
</span>
<span class="kt">int</span> <span class="nf">draw_string</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">string</span><span class="p">,</span> <span class="kt">int</span> <span class="n">base_x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">base_y</span><span class="p">,</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">font</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">spacing</span><span class="p">,</span> <span class="kt">int</span> <span class="n">line_spacing</span><span class="p">,</span> <span class="kt">int</span> <span class="n">monospace</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">char_x</span><span class="p">,</span> <span class="n">char_y</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">height_byte</span> <span class="o">=</span> <span class="p">(</span><span class="n">height</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="mi">8</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">entry_size</span> <span class="o">=</span> <span class="n">height_byte</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">bitmap_width</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">bit_index</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">bit</span><span class="p">;</span>

    <span class="n">char_x</span> <span class="o">=</span> <span class="n">base_x</span><span class="p">;</span>
    <span class="n">char_y</span> <span class="o">=</span> <span class="n">base_y</span><span class="p">;</span>
    <span class="n">cur_x</span> <span class="o">=</span> <span class="n">char_x</span><span class="p">;</span>
    <span class="n">cur_y</span> <span class="o">=</span> <span class="n">char_y</span><span class="p">;</span>

    <span class="k">if</span><span class="p">((</span><span class="n">cur_y</span> <span class="o">+</span> <span class="n">height</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">LCD_HEIGHT</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* out of LCD size */</span>
    <span class="k">if</span><span class="p">(</span><span class="n">width</span> <span class="o">&lt;=</span> <span class="o">-</span><span class="n">spacing</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* invalid argument */</span>

    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">string</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="cm">/* new line character */</span>
        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">string</span> <span class="o">==</span> <span class="sc">'\n'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">char_x</span> <span class="o">=</span> <span class="n">base_x</span><span class="p">;</span>
            <span class="n">cur_x</span> <span class="o">=</span> <span class="n">char_x</span><span class="p">;</span>
            <span class="n">char_y</span> <span class="o">+=</span> <span class="n">height</span> <span class="o">+</span> <span class="n">line_spacing</span><span class="p">;</span>
            <span class="n">cur_y</span> <span class="o">=</span> <span class="n">char_y</span><span class="p">;</span>
            <span class="n">string</span><span class="o">++</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">string</span> <span class="o">&lt;</span> <span class="n">start</span> <span class="o">||</span> <span class="o">*</span><span class="n">string</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span><span class="o">++</span><span class="p">;</span>
            <span class="k">continue</span><span class="p">;</span> <span class="cm">/* invalid character */</span>
        <span class="p">}</span>

        <span class="cm">/* get character data */</span>
        <span class="n">index</span> <span class="o">=</span> <span class="o">*</span><span class="n">string</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">monospace</span><span class="p">)</span>
            <span class="n">bitmap_width</span> <span class="o">=</span> <span class="n">width</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">bitmap_width</span> <span class="o">=</span> <span class="n">font</span><span class="p">[</span><span class="n">entry_size</span> <span class="o">*</span> <span class="n">index</span><span class="p">];</span>
        <span class="n">bitmap</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">font</span><span class="p">[</span><span class="n">entry_size</span> <span class="o">*</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>

        <span class="k">if</span><span class="p">(</span><span class="n">char_x</span> <span class="o">+</span> <span class="n">bitmap_width</span> <span class="o">&gt;</span> <span class="n">LCD_WIDTH</span><span class="p">)</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* out of LCD size */</span>

        <span class="cm">/* draw character */</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">bitmap_width</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height_byte</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">bitmap</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">height_byte</span> <span class="o">+</span> <span class="n">y</span><span class="p">];</span>

                <span class="k">for</span><span class="p">(</span><span class="n">bit_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">bit_index</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">bit_index</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span><span class="p">((</span><span class="n">y</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">bit_index</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">height</span><span class="p">)</span>
                        <span class="k">break</span><span class="p">;</span> <span class="cm">/* skip unused bits */</span>

                    <span class="n">bit</span> <span class="o">=</span> <span class="n">data</span> <span class="o">&amp;</span> <span class="mh">0x01</span><span class="p">;</span>
                    <span class="n">data</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>

                    <span class="cm">/*
                     * TODO: Implement draw_pixel() function
                     * for your target system.
                     */</span>
                    <span class="n">draw_pixel</span><span class="p">(</span><span class="n">cur_x</span><span class="p">,</span> <span class="n">cur_y</span><span class="p">,</span> <span class="n">bit</span><span class="p">);</span>
                    <span class="n">cur_y</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">cur_x</span><span class="o">++</span><span class="p">;</span>
            <span class="n">cur_y</span> <span class="o">=</span> <span class="n">char_y</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="cm">/* process the next character */</span>
        <span class="n">char_x</span> <span class="o">+=</span> <span class="n">bitmap_width</span> <span class="o">+</span> <span class="n">spacing</span><span class="p">;</span>
        <span class="n">cur_x</span> <span class="o">=</span> <span class="n">char_x</span><span class="p">;</span>
        <span class="n">string</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>이 코드를 사용하기 위해서는 다음을 수정해야 한다.</p>

<ol>
  <li><code class="highlighter-rouge">LCD_WIDTH</code>와 <code class="highlighter-rouge">LCD_HEIGHT</code>를 타겟 디스플레이의 가로/세로 픽셀 길이로 정의</li>
  <li><code class="highlighter-rouge">draw_pixel()</code> 함수를 각자 타겟 디스플레이에 맞는 코드로 구현</li>
</ol>

<p><code class="highlighter-rouge">int draw_pixel(x, y, bit)</code> 함수는 디스플레이의 왼쪽 위를 (0, 0) 좌표로 정의했을 때 (x, y) 위치에 해당하는 픽셀을 bit 값으로 설정하는 함수이다. bit는 0 또는 1이 입력된다.</p>

<p>이 코드의 파라미터에 대한 설명은 다음과 같다.</p>

<ol>
  <li><code class="highlighter-rouge">string</code>: 출력할 문자열 (<code class="highlighter-rouge">'\0'</code> 문자로 끝나는)</li>
  <li><code class="highlighter-rouge">base_x</code>: 문자열의 왼쪽 위 점이 위치할 디스플레이 상의 x 좌표</li>
  <li><code class="highlighter-rouge">base_y</code>: 문자열의 왼쪽 위 점이 위치할 디스플레이 상의 y 좌표</li>
  <li><code class="highlighter-rouge">font</code>: 앞에서 GLCD font creator를 통해 생성한 C 배열</li>
  <li><code class="highlighter-rouge">width</code>: 폰트의 가로 픽셀 길이</li>
  <li><code class="highlighter-rouge">height</code>: 폰트의 세로 픽셀 길이</li>
  <li><code class="highlighter-rouge">start</code> 폰트에 정의된 시작 문자의 아스키 코드</li>
  <li><code class="highlighter-rouge">end</code>: 폰트에 정의된 끝 문자의 아스키 코드</li>
  <li><code class="highlighter-rouge">spacing</code>: 자간</li>
  <li><code class="highlighter-rouge">line_spacing</code>: 줄 간격</li>
  <li><code class="highlighter-rouge">monospace</code>: 1이면 고정길이 출력 0이면 가변길이 출력</li>
</ol>

<p>파라미터가 많은데, 기존 코드에서는 구조체를 통해 함수를 호출하도록 하였으나 설명을 위해 하나하나 풀어서 작성하였다.</p>

<p><code class="highlighter-rouge">width</code>, <code class="highlighter-rouge">height</code>는 폰트의 가로 및 세로 픽셀 수이다. GLCD font creator에서 생성하는 C 배열은 가변길이 폰트라도 크기가 가장 큰 문자를 기준으로 가로 및 세로 픽셀 수가 모든 문자에 대해 고정으로 정의된다. (빈 부분의 픽셀 값은 0)</p>

<p><code class="highlighter-rouge">start</code>, <code class="highlighter-rouge">end</code>의 경우 GLCD font creator에서 C 배열을 생성할 때 메모리 절약을 위해 사용하지 않는 아스키 코드 구간을 삭제하고 비트맵을 생성하도록 설정할 수 있는데, 여기서 생성하도록 설정된 아스키 코드 구간의 첫 문자가 <code class="highlighter-rouge">start</code>이고, 마지막 문자가 <code class="highlighter-rouge">end</code>이다.<br />
기본 설정의 경우 32 ~ 127 구간의 C 배열을 생성하므로 <code class="highlighter-rouge">start=32</code>, <code class="highlighter-rouge">end=127</code>을 지정하면 된다.</p>

<p><code class="highlighter-rouge">spacing</code>, <code class="highlighter-rouge">line_spacing</code>: 자간과 줄간격도 설정할 수 있도록 구현하였다.<br />
<code class="highlighter-rouge">monospace</code>: 가변길이 문자열을 고정길이로 출력할 경우 어색하기 때문에 <code class="highlighter-rouge">monospace</code> 파라미터를 사용하여 어떤 방식으로 출력할지 설정하도록 하였다.</p>

<p>위 함수의 사용 예는 다음과 같다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">draw_string</span><span class="p">(</span><span class="s">"Hello</span><span class="se">\n</span><span class="s">World!"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">consolas7x15</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span></code></pre></figure>]]></content><author><name>khlee</name></author><category term="Embedded" /><summary type="html"><![CDATA[디스플레이에 문자열을 픽셀 단위로 처리하여 출력하는 알고리즘을 개발하기 위해 먼저 각 문자별로 비트맵이 정의된 C 배열이 필요하다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/18-05-03-Font-Display/oled.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/18-05-03-Font-Display/oled.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IgH EtherCAT Master Stack API 분석</title><link href="http://localhost:4000/blog/IgH-EtherCAT/" rel="alternate" type="text/html" title="IgH EtherCAT Master Stack API 분석" /><published>2018-02-14T00:00:00+09:00</published><updated>2018-02-14T00:00:00+09:00</updated><id>http://localhost:4000/blog/IgH-EtherCAT</id><content type="html" xml:base="http://localhost:4000/blog/IgH-EtherCAT/"><![CDATA[<h2 id="준비물">준비물</h2>

<ul>
  <li>IgH EtherCAT Master Stack 1.5.2와 Xenomai OS가 설치된 제어기</li>
  <li>위 플랫폼에 대한 개발환경 (툴체인, 라이브러리 등)</li>
  <li>Digital I/O EtherCAT Slave 장치</li>
</ul>

<h2 id="참고자료">참고자료</h2>

<ul>
  <li><a href="https://etherlab.org/en/ethercat/">IgH EtherCAT Master Stack 라이브러리</a></li>
  <li><a href="https://etherlab.org/download/ethercat/ethercat-1.5.2.pdf">IgH EtherCAT Master Stack 1.5.2 Documentation</a></li>
</ul>

<h2 id="예제코드">예제코드</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;signal.h&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;native/task.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;native/timer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ecrt.h&gt;</span><span class="cp">
</span>
<span class="cp">#define INTERVAL 1000000
</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">rt_task_proc</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">sigint_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">);</span>

<span class="cm">/* PDO list to use in application */</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slave0_6000_01</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slave0_6000_01_bit</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slave0_7010_01</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">slave0_7010_01_bit</span><span class="p">;</span>

<span class="k">static</span> <span class="n">ec_pdo_entry_reg_t</span> <span class="n">pdo_entry_reg</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x6000</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_6000_01</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_6000_01_bit</span><span class="p">},</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x7010</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_7010_01</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_7010_01_bit</span><span class="p">},</span>
    <span class="p">{}</span>
<span class="p">};</span>

<span class="k">static</span> <span class="n">ec_master_t</span><span class="o">*</span> <span class="n">master</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="k">static</span> <span class="n">ec_domain_t</span><span class="o">*</span> <span class="n">domain</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">uint8_t</span><span class="o">*</span> <span class="n">domain_pd</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

<span class="k">static</span> <span class="kt">int</span> <span class="n">alive</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">ec_master_info_t</span> <span class="n">master_info</span><span class="p">;</span>
    <span class="n">ec_slave_info_t</span><span class="o">*</span> <span class="n">slave_info_list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">ec_slave_config_t</span><span class="o">*</span> <span class="n">slave</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">slave_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">RT_TASK</span><span class="o">*</span> <span class="n">rt_task_plc</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="cm">/* signal handler registration */</span>
    <span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">sigint_handler</span><span class="p">);</span>

    <span class="cm">/* configure master */</span>
    <span class="n">master</span> <span class="o">=</span> <span class="n">ecrt_request_master</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">master</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT master request failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">domain</span> <span class="o">=</span> <span class="n">ecrt_master_create_domain</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">domain</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT domain creation failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">ecrt_master</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">master_info</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT master information request failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ret</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* allocate momory for slave information */</span>
    <span class="n">slave_count</span> <span class="o">=</span> <span class="n">master_info</span><span class="p">.</span><span class="n">slave_count</span><span class="p">;</span>
    <span class="n">slave_info_list</span> <span class="o">=</span> <span class="p">(</span><span class="n">ec_slave_info_t</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ec_slave_info_t</span><span class="p">)</span> <span class="o">*</span> <span class="n">slave_count</span><span class="p">);</span>

    <span class="cm">/* configure slaves */</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">slave_count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">ecrt_master_get_slave</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT slave information request failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ret</span><span class="p">;</span>
            <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">slave</span> <span class="o">=</span> <span class="n">ecrt_master_slave_config</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">vendor_id</span><span class="p">,</span>
            <span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">product_code</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">slave</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT slave configuration failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/* setup PDO registration array */</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">index</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">position</span> <span class="o">&lt;</span> <span class="n">slave_count</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">vendor_id</span> <span class="o">=</span>
                <span class="n">slave_info_list</span><span class="p">[</span><span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">position</span><span class="p">].</span><span class="n">vendor_id</span><span class="p">;</span>
            <span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">product_code</span> <span class="o">=</span>
                <span class="n">slave_info_list</span><span class="p">[</span><span class="n">pdo_entry_reg</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">position</span><span class="p">].</span><span class="n">product_code</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="cm">/* get PDO entry list */</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">ecrt_domain_reg_pdo_entry_list</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">pdo_entry_reg</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT PDO registration failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* create real-time periodic task */</span>
    <span class="n">rt_task_plc</span> <span class="o">=</span> <span class="p">(</span><span class="n">RT_TASK</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">RT_TASK</span><span class="p">));</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">rt_task_create</span><span class="p">(</span><span class="n">rt_task_plc</span><span class="p">,</span> <span class="s">"rt_task_plc"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="n">T_JOINABLE</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Real-time task creation failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* activate EtherCAT master */</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">ecrt_master_set_send_interval</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="n">INTERVAL</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT setting send interval failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ret</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">ret</span> <span class="o">=</span> <span class="n">ecrt_master_activate</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT master activation failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ret</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* get PDO domain pointer */</span>
    <span class="n">domain_pd</span> <span class="o">=</span> <span class="n">ecrt_domain_data</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">domain_pd</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"EtherCAT mapping process data failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* start real-time periodic task */</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">rt_task_start</span><span class="p">(</span><span class="n">rt_task_plc</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rt_task_proc</span><span class="p">,</span> <span class="n">rt_task_plc</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Real-time task start failed!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">goto</span> <span class="n">CLEANUP</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">rt_task_join</span><span class="p">(</span><span class="n">rt_task_plc</span><span class="p">);</span>

<span class="n">CLEANUP</span> <span class="o">:</span>
    <span class="k">if</span><span class="p">(</span><span class="n">slave_info_list</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">free</span><span class="p">(</span><span class="n">slave_info_list</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">rt_task_plc</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">free</span><span class="p">(</span><span class="n">rt_task_plc</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="n">master</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">ecrt_release_master</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">rt_task_proc</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">sw</span><span class="p">,</span> <span class="n">led</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">RT_TASK</span><span class="o">*</span> <span class="n">rt_task_plc</span> <span class="o">=</span> <span class="p">(</span><span class="n">RT_TASK</span><span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
    <span class="n">RTIME</span> <span class="n">current_time</span> <span class="o">=</span> <span class="n">rt_timer_read</span><span class="p">();</span>

    <span class="cm">/* set real-time task timer */</span>
    <span class="n">rt_task_set_periodic</span><span class="p">(</span><span class="n">rt_task_plc</span><span class="p">,</span> <span class="n">current_time</span> <span class="o">+</span> <span class="n">INTERVAL</span><span class="p">,</span>
        <span class="n">rt_timer_ns2ticks</span><span class="p">(</span><span class="n">INTERVAL</span><span class="p">));</span>

    <span class="k">while</span><span class="p">(</span><span class="n">alive</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="cm">/* retrieve */</span>
        <span class="n">ecrt_master_receive</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
        <span class="n">ecrt_domain_process</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span>
        <span class="n">sw</span> <span class="o">=</span> <span class="n">EC_READ_BIT</span><span class="p">(</span><span class="n">domain_pd</span> <span class="o">+</span> <span class="n">slave0_6000_01</span><span class="p">,</span> <span class="n">slave0_6000_01_bit</span><span class="p">);</span>

        <span class="cm">/* computation */</span>
        <span class="k">if</span><span class="p">(</span><span class="n">sw</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">led</span> <span class="o">=</span> <span class="o">!</span><span class="n">led</span><span class="p">;</span>
                <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">led</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="cm">/* publish */</span>
        <span class="n">EC_WRITE_BIT</span><span class="p">(</span><span class="n">domain_pd</span> <span class="o">+</span> <span class="n">slave0_7010_01</span><span class="p">,</span> <span class="n">slave0_7010_01_bit</span><span class="p">,</span> <span class="n">led</span><span class="p">);</span>        <span class="n">ecrt_domain_queue</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span>
        <span class="n">ecrt_master_send</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>

        <span class="cm">/* wait until next period */</span>
        <span class="n">rt_task_wait_period</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">sigint_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">alive</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="설명">설명</h2>

<p>본 예제 코드는 slave 장치의 스위치가 on 상태인 경우 LED를 1Hz로 깜빡이게 하는 응용이다.<br />
IgH와 같은 역할을 하는 SOEM을 활용한 마스터 예제 코드와 비교해서 IgH가 더 성능도 좋고 기능도 많기 때문인지 예제 코드의 양이 많은 편이다.</p>

<h2 id="마스터-초기화">마스터 초기화</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">master</span> <span class="o">=</span> <span class="n">ecrt_request_master</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="n">domain</span> <span class="o">=</span> <span class="n">ecrt_master_create_domain</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
<span class="n">ecrt_master</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">master_info</span><span class="p">);</span>
<span class="n">slave_count</span> <span class="o">=</span> <span class="n">master_info</span><span class="p">.</span><span class="n">slave_count</span><span class="p">;</span></code></pre></figure>

<p>마스터 초기화는 현재 프로그램이 실행되고 있는 마스터 장치에서 0번 EtherCAT 인터페이스에 대한 오브젝트<code class="highlighter-rouge">master</code>를 받아온 후 그에 대한 도메인 오브젝트<code class="highlighter-rouge">domain</code>을 받는 것으로 이루어진다. 마스터 오브젝트<code class="highlighter-rouge">master</code>가 마스터 장치를 의미한다면, 도메인<code class="highlighter-rouge">domain</code>은 주기적으로 통신할 데이터(PDO)들을 의미한다.<br />
마스터 오브젝트의 필드는 IgH 라이브러리 내에서만 접근할 수 있도록 감추어져 있기 때문에 슬레이브 장치의 수 등 정보를 알기 위해서는 <code class="highlighter-rouge">ecrt_master()</code>로 마스터 오브젝트의 정보를 받아와야 한다. 슬레이브 장치의 수는 <code class="highlighter-rouge">master_info.slave_count</code>를 통해 알 수 있다.</p>

<h2 id="슬레이브-초기화">슬레이브 초기화</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">slave_count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ecrt_master_get_slave</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">ecrt_master_slave_config</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">vendor_id</span><span class="p">,</span>
        <span class="n">slave_info_list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">product_code</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>슬레이브 초기화를 위한 함수 <code class="highlighter-rouge">ecrt_master_slave_config()</code>는 초기화하려는 슬레이브의 Vendor ID와 Product code를 필요로 한다. 해당 정보는 <code class="highlighter-rouge">ecrt_master_get_slave()</code> 함수로 얻어올 수 있다.<br />
본 예제와 같이 슬레이브로부터 필요한 정보를 받아와서 초기화를 하는 방법이 있고 마스터에서 미리 설정된 정보를 이용하여 직접 초기화 하는 방법이 있다. 전자의 경우 슬레이브 내에 설정 정보들이 저장되어 있는 SII(Slave Information Interface)로부터 마스터가 초기화에 필요한 정보를 읽어 초기화가 이루어지며, 후자의 경우 사용자가 특정 슬레이브의 정보가 XML 포맷으로 정의된 ESI 파일을 마스터 프로그램(예를 들어 TwinCAT과 같은 프로그램)을 통해 입력하여 초기화가 이루어진다.</p>

<h2 id="입출력pdo-설정">입출력(PDO) 설정</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">static</span> <span class="n">ec_pdo_entry_reg_t</span> <span class="n">pdo_entry_reg</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x6000</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_6000_01</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_6000_01_bit</span><span class="p">},</span>
    <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x7010</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_7010_01</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slave0_7010_01_bit</span><span class="p">},</span>
    <span class="p">{}</span>
<span class="p">};</span>
<span class="n">ecrt_domain_reg_pdo_entry_list</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">pdo_entry_reg</span><span class="p">);</span></code></pre></figure>

<p>주기적으로 통신할 데이터를 정의하는 입출력 설정으로는 <code class="highlighter-rouge">ec_pdo_entry_reg_t</code> 타입의 구조체와 <code class="highlighter-rouge">ecrt_domain_reg_pdo_entry_list()</code> 함수가 사용된다. <code class="highlighter-rouge">ec_pdo_entry_reg_t</code> 구조체는 ecrt.h 파일에 다음과 같이 정의되어 있다.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="kt">uint16_t</span> <span class="n">alias</span><span class="p">;</span>
    <span class="kt">uint16_t</span> <span class="n">position</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">vendor_id</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">product_code</span><span class="p">;</span>
    <span class="kt">uint16_t</span> <span class="n">index</span><span class="p">;</span>
    <span class="kt">uint8_t</span> <span class="n">subindex</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">offset</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">bit_position</span><span class="p">;</span>
<span class="p">}</span> <span class="n">ec_pdo_entry_reg_t</span><span class="p">;</span></code></pre></figure>

<p>alias와 position을 통해 어떤 슬레이브 장치인지 특정한다. <code class="highlighter-rouge">vendor_id</code>와 <code class="highlighter-rouge">product_code</code>는 특정한 슬레이브에 대한 정보로, 해당 슬레이브의 정보와 일치해야 한다. 예제 코드에서는 <code class="highlighter-rouge">ecrt_master_get_slave()</code> 함수를 통해 얻은 정보를 이용하여 이 값을 초기화하는 코드가 있다. <code class="highlighter-rouge">index</code>와 <code class="highlighter-rouge">subindex</code>는 특정한 슬레이브 장치에서 통신할 OD(Object Dictionary)의 index와 subindex를 의미한다. 이와 같은 정보를 입력한 구조체의 배열을 정의한 후 <code class="highlighter-rouge">ecrt_domain_reg_pdo_entry_list()</code> 함수를 호출하면 해당 구조체의 마지막 두 필드에 PDO 엔트리의 byte offset과 bit position이 저장된다. 이 값은 추후에 입출력을 위해 사용된다.</p>

<h2 id="마스터-활성화">마스터 활성화</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">ecrt_master_set_send_interval</span><span class="p">(</span><span class="n">master</span><span class="p">,</span> <span class="n">INTERVAL</span><span class="p">);</span>
<span class="n">ecrt_master_activate</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
<span class="n">domain_pd</span> <span class="o">=</span> <span class="n">ecrt_domain_data</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span></code></pre></figure>

<p>마스터가 통신할 주기를 설정하고 활성화한다. 통신할 주기는 <code class="highlighter-rouge">ecrt_master_set_send_interval()</code> 함수를 통해 설정할 수 있으며, 두 번째 인자에 주기를 나노초 단위로 입력하면 된다. 이후에 <code class="highlighter-rouge">ecrt_master_activate()</code> 함수를 통해 마스터 장치를 활성화한다. 활성화 이후에는 실시간 context로 전환되며 <code class="highlighter-rouge">malloc()</code>이나 대부분의 IgH 라이브러리 함수들을 포함하는 비실시간 함수들의 사용은 제한된다. 이 함수가 호출된 이후에는 실시간 함수들만 사용할 수 있다.<br />
<code class="highlighter-rouge">ecrt_domain_data()</code> 함수는 인자로 전달된 도메인에 대한 데이터 필드의 포인터를 받아온다. 이 값도 추후에 입출력을 위해 사용된다.</p>

<h2 id="실행-단계">실행 단계</h2>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">while</span><span class="p">(</span><span class="n">alive</span><span class="p">)</span>
<span class="p">{</span>
    <span class="cm">/* retrieve */</span>
    <span class="n">ecrt_master_receive</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>
    <span class="n">ecrt_domain_process</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span>
    <span class="n">sw</span> <span class="o">=</span> <span class="n">EC_READ_BIT</span><span class="p">(</span><span class="n">domain_pd</span> <span class="o">+</span> <span class="n">slave0_6000_01</span><span class="p">,</span> <span class="n">slave0_6000_01_bit</span><span class="p">);</span>

    <span class="cm">/* computation */</span>
    <span class="cm">/* write some computation code... */</span>

    <span class="cm">/* publish */</span>
    <span class="n">EC_WRITE_BIT</span><span class="p">(</span><span class="n">domain_pd</span> <span class="o">+</span> <span class="n">slave0_7010_01</span><span class="p">,</span> <span class="n">slave0_7010_01_bit</span><span class="p">,</span> <span class="n">led</span><span class="p">);</span>
    <span class="n">ecrt_domain_queue</span><span class="p">(</span><span class="n">domain</span><span class="p">);</span>
    <span class="n">ecrt_master_send</span><span class="p">(</span><span class="n">master</span><span class="p">);</span>

    <span class="cm">/* wait until next period */</span>
<span class="p">}</span></code></pre></figure>

<p>실행 단계에서는 <code class="highlighter-rouge">ecrt_master_set_send_interval()</code> 함수를 통해 설정한 주기마다 [retrieve] - [computation] - [publish]를 반복한다.<br />
retrieve에서는 <code class="highlighter-rouge">ecrt_mater_receive()</code> 함수와 <code class="highlighter-rouge">ecrt_domain_process()</code> 함수가 기본적으로 필요하며, 앞서 입출력 설정에서 입력으로 설정한 데이터를 슬레이브로부터 받아오는 것으로 구성된다. 데이터를 받아오는 기능은 ecrt.h에 매크로로 정의되어 있으며 데이터의 타입별로 매크로가 따로 정의되어 있다. (<code class="highlighter-rouge">EC_READ_BIT</code> 등) 이 매크로를 사용할 때 마스터 활성화 단계에서 얻은 도메인 데이터 필드의 포인터(<code class="highlighter-rouge">domain_pd</code>)와 함께 입출력 설정에서 <code class="highlighter-rouge">ecrt_domain_reg_pdo_entry_list()</code> 함수를 통해 얻은 byte offset과 bit position이 사용된다.<br />
computation에서는 retrieve에서 읽어오는 데이터를 토대로 publish에서 쓸 데이터를 계산한다. 이 위치의 코드는 응용에 따라 자유롭게 구성된다.<br />
publish에서는 retrieve와 반대로 먼저 <code class="highlighter-rouge">EC_WRITE_BIT</code> 등의 매크로로 도메인 데이터 필드에 값을 쓴 다음 <code class="highlighter-rouge">ecrt_domain_queue()</code> 함수와 <code class="highlighter-rouge">ecrt_master_send()</code> 함수를 통해 그 값을 슬레이브로 출력한다.</p>]]></content><author><name>khlee</name></author><category term="EtherCAT" /><summary type="html"><![CDATA[준비물]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/18-02-14-IgH-EtherCAT/ethercat.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/18-02-14-IgH-EtherCAT/ethercat.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Windows에서 ARM Linux 크로스 컴파일 환경 구성하기</title><link href="http://localhost:4000/blog/ARM-Linux-Cross-Compile/" rel="alternate" type="text/html" title="Windows에서 ARM Linux 크로스 컴파일 환경 구성하기" /><published>2017-10-27T00:00:00+09:00</published><updated>2017-10-27T00:00:00+09:00</updated><id>http://localhost:4000/blog/ARM-Linux-Cross-Compile</id><content type="html" xml:base="http://localhost:4000/blog/ARM-Linux-Cross-Compile/"><![CDATA[<p>IDE 등으로 배포하기 위해 Windows 플랫폼에서 ARM 크로스 컴파일 환경을 Standalone으로 구성하려고 한다.</p>

<h2 id="준비하기">준비하기</h2>

<p>준비물 : mingw32 arm linux toolchain, cmake, mingw32-make</p>

<p>우선 작업을 위한 폴더를 만든다. 나는 D: 바로 아래에 arm이라는 폴더를 만들었다.
그 폴더 안에 다음 링크를 통해 받은 파일을 저장한다.</p>

<p>mingw32 arm liunux 툴체인 : <a href="https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/">https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/</a><br />
이 사이트에서 “gcc-linaro-[버전]-[날짜]-i686-mingw32_arm-linux-gnueabihf.tar.xz” 파일을 다운받는다.<br />
(다른 버전은 <a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads">여기</a> 참조)</p>

<p>cmake : <a href="https://cmake.org/files/v3.10/cmake-3.10.0-rc3-win64-x64.zip">https://cmake.org/files/v3.10/cmake-3.10.0-rc3-win64-x64.zip</a><br />
(역시 다른 버전을 원하면 <a href="https://cmake.org/download/">여기</a> 참조)</p>

<p>Standalone으로 구성하기 위해 cmake는 zip 파일로 내려받는다.</p>

<p>위 파일들을 받고 압축을 해제한다.</p>

<p>mingw32-make는 정식 경로에서 Standalone으로 받는 방법은 찾지 못했다. 대신에 다음 사이트에서 mingw-get을 받아 설치한 후 mingw32-make.exe를 가져오는 방법을 사용하였다.<br />
<a href="https://sourceforge.net/projects/mingw/">https://sourceforge.net/projects/mingw/</a></p>

<p>설치 후 mingw-get GUI에서 다음과 같이 mingw32-make를 선택해서 설치하거나</p>

<p><img src="/blog/assets/post/17-10-27-ARM-Linux-Cross-Compile/install_mingw_gui.png" alt="install mingw gui" /></p>

<p>명령 프롬프트에서 설치할 수 있다.</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="o">&gt;</span> <span class="kd">C</span>:\MinGW\bin\mingw<span class="na">-get</span>.exe <span class="kd">install</span> <span class="kd">mingw32</span><span class="na">-make</span></code></pre></figure>

<p>어떤 방법으로든 설치하고 나면 MinGW 설치 폴더 아래 bin 폴더에 다음과 같은 파일이 생길 것이다.</p>

<p><img src="/blog/assets/post/17-10-27-ARM-Linux-Cross-Compile/mingw_files.png" alt="mingw files" /></p>

<p>이 파일들 중 mingw-get.exe를 제외한 5개 파일을 작업 폴더에 mingw32-make라는 폴더를 만들고 그 아래에 복사한다.</p>

<p>준비물을 모두 챙기고 나면 작업 폴더는 다음과 같이 될 것이다.</p>

<p><img src="/blog/assets/post/17-10-27-ARM-Linux-Cross-Compile/working_directory.png" alt="working directory" /></p>

<h2 id="빌드-형상-정의하기">빌드 형상 정의하기</h2>

<p>이제 툴체인을 명시한 toolchain.arm.cmake 파일을 작성한다.</p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nf">SET</span><span class="p">(</span>CMAKE_SYSTEM_NAME Linux<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_SYSTEM_PROCESSOR arm<span class="p">)</span>

<span class="nf">SET</span><span class="p">(</span>COMPILER_ROOT <span class="s2">"D:/arm/gcc-linaro-7.1.1-2017.08-i686-mingw32_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-"</span><span class="p">)</span>

<span class="nf">SET</span><span class="p">(</span>CMAKE_C_COMPILER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>gcc.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_CXX_COMPILER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>g++.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_LINKER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>ld.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_NM <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>nm.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_OBJCOPY <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>objcopy.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_OBJDUMP <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>objdump.exe<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_RANLIB <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>ranlib.exe<span class="p">)</span></code></pre></figure>

<p>경로는 각자 환경에 맞게 수정하면 된다.
파일 구분자를 백슬래시(\)로 입력하면 cmake가 escape character로 처리해서 오류가 생기기 때문에 슬래시(/)로 입력했다.</p>

<h2 id="예제-코드-작성하기">예제 코드 작성하기</h2>

<p>다음과 같이 간단한 예제 소스코드를 작성했다.</p>

<p>main.c</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello arm!!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>CMakeLists.txt</p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nf">ADD_EXECUTABLE</span><span class="p">(</span>App main.c<span class="p">)</span></code></pre></figure>

<h2 id="빌드하고-실행하기">빌드하고 실행하기</h2>

<p>이제 준비는 모두 끝났으니 빌드하면 된다.</p>

<p>빌드를 편하게 하기 위해 배치 파일을 만들었다.</p>

<p>build.bat</p>

<figure class="highlight"><pre><code class="language-batch" data-lang="batch"><span class="nb">mkdir</span> <span class="kd">build</span>
<span class="nb">cd</span> <span class="kd">build</span>

<span class="s2">"../cmake-3.10.0-rc3-win64-x64/bin/cmake.exe"</span> <span class="na">-DCMAKE</span>_MAKE_PROGRAM<span class="o">=</span><span class="s2">"D:/arm/mingw32-make/mingw32-make.exe"</span> <span class="na">-DCMAKE</span>_TOOLCHAIN_FILE<span class="o">=</span>../toolchain.arm.cmake <span class="na">-G </span><span class="s2">"MinGW Makefiles"</span> ..

<span class="s2">"../cmake-3.10.0-rc3-win64-x64/bin/cmake.exe"</span>  <span class="na">--build </span>.

@echo <span class="na">off</span>
<span class="kd">set</span> <span class="na">/p </span><span class="kd">str</span><span class="o">=</span><span class="kd">completed</span></code></pre></figure>

<p>준비물들이랑 빌드 결과물이 섞이면 곤란하니 build 폴더를 생성하고 그 아래에 빌드 결과물이 생성되도록 하였다.</p>

<p>세 번째 명령어가 매우 긴데, 다음과 같은 일을 한다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">-DCMAKE_MAKE_PROGRAM</code>: mingw32-make.exe의 경로를 지정한다.(절대경로)<br />
mingw-get을 설치하고 나서는 이 옵션이 없어도 cmake가 알아서 mingw32-make의 경로를 찾아내는데, mingw-get 없이 Standalone으로 실행하려면 이 옵션이 반드시 필요하다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">-DCMAKE_TOOLCHAIN_FILE</code>: 툴체인을 명시한 toolchain.arm.cmake 파일의 경로를 지정한다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">-G "MinGW Makefiles"</code>: mingw32-make.exe가 이해할 수 있는 Makefile을 생성한다.</p>
  </li>
</ul>

<p>build.bat 파일을 실행하고 나면 build 폴더 안에 App이라는 파일이 생성되었을 것이다.</p>

<p>이것을 ARM Linux 플랫폼에 옮기고 실행한다.</p>

<p><img src="/blog/assets/post/17-10-27-ARM-Linux-Cross-Compile/execute.png" alt="execute" /></p>]]></content><author><name>khlee</name></author><category term="Build system" /><summary type="html"><![CDATA[IDE 등으로 배포하기 위해 Windows 플랫폼에서 ARM 크로스 컴파일 환경을 Standalone으로 구성하려고 한다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-10-27-ARM-Linux-Cross-Compile/satellite.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/17-10-27-ARM-Linux-Cross-Compile/satellite.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">cmake에서 툴체인 사용하기</title><link href="http://localhost:4000/blog/CMake-Toolchain/" rel="alternate" type="text/html" title="cmake에서 툴체인 사용하기" /><published>2017-10-26T00:00:00+09:00</published><updated>2017-10-26T00:00:00+09:00</updated><id>http://localhost:4000/blog/CMake-Toolchain</id><content type="html" xml:base="http://localhost:4000/blog/CMake-Toolchain/"><![CDATA[<p><a href="https://lklab.github.io/blog/blog/cmake/">지난 번</a>에는 cmake를 사용하여 서로 다른 플랫폼에서 빌드하는 방법을 알아보았는데, 이번엔 한 플랫폼에서 다른 플랫폼 실행 파일을 크로스 컴파일하는 방법을 알아볼 것이다.</p>

<p>예제로, 데스크탑 PC(x86_64 Ubuntu 16.04)에서 ARM Linux 실행 파일을 크로스 컴파일해 볼 것이다.</p>

<p>먼저 툴체인을 받아와서 압축을 해제한다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget https://releases.linaro.org/components/toolchain/binaries/latest/arm-linux-gnueabihf/gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf.tar.xz
<span class="nv">$ </span><span class="nb">tar </span>xf gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf.tar.xz</code></pre></figure>

<p>원하는 버전의 다른 ARM 툴체인은 <a href="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads">여기</a>서 찾아볼 수 있다.</p>

<p>이제 toolchain.arm.cmake 라는 파일을 만들어서 내용을 다음과 같이 채워 넣는다.</p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nf">SET</span><span class="p">(</span>CMAKE_SYSTEM_NAME Linux<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_SYSTEM_PROCESSOR arm<span class="p">)</span>

<span class="nf">SET</span><span class="p">(</span>COMPILER_ROOT /root/cmake/gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-<span class="p">)</span>

<span class="nf">SET</span><span class="p">(</span>CMAKE_C_COMPILER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>gcc<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_CXX_COMPILER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>g++<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_LINKER <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>ld<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_NM <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>nm<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_OBJCOPY <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>objcopy<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_OBJDUMP <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>objdump<span class="p">)</span>
<span class="nf">SET</span><span class="p">(</span>CMAKE_RANLIB <span class="si">${</span><span class="nv">COMPILER_ROOT</span><span class="si">}</span>ranlib<span class="p">)</span></code></pre></figure>

<p>이 파일은 툴체인의 경로(절대경로)를 명시하는 역할을 한다. 나중에 cmake를 실행할 때 이 파일을 입력해서 빌드시 사용할 툴체인을 지정해줄 수 있다. 첫 번째 줄의 <code class="highlighter-rouge">COMPILER_ROOT</code> 변수는 각자 환경에 맞게 수정하면 된다. 여기서는 앞에서 받아온 ARM 툴체인의 실행파일(gcc, ld 등)들의 경로를 지정하였다.</p>

<p>예제로 빌드할 소스코드(main.c)와 cmake 파일(CMakeLists.txt)를 작성한다.</p>

<p>main.c</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello arm!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>CMakeLists.txt</p>

<figure class="highlight"><pre><code class="language-cmake" data-lang="cmake"><span class="nf">ADD_EXECUTABLE</span><span class="p">(</span>App main.c<span class="p">)</span></code></pre></figure>

<p>이제 다음 명령어를 입력하면 빌드된다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>cmake <span class="nt">-DCMAKE_TOOLCHAIN_FILE</span><span class="o">=</span>toolchain.arm.cmake <span class="nb">.</span>
<span class="nv">$ </span>make</code></pre></figure>

<p>App 이라는 실행파일이 생성되었을 것이다. file 명령어를 통해 확인해 보면 잘 컴파일 된 것을 확인할 수 있다.</p>

<p><img src="/blog/assets/post/17-10-26-CMake-Toolchain/build.png" alt="build" /></p>

<p>이 파일을 ARM 플랫폼으로 (여기서는 raspberry pi에) 전송한 후에 실행한 화면이다.</p>

<p><img src="/blog/assets/post/17-10-26-CMake-Toolchain/execute.png" alt="execute" /></p>]]></content><author><name>khlee</name></author><category term="Build system" /><summary type="html"><![CDATA[지난 번에는 cmake를 사용하여 서로 다른 플랫폼에서 빌드하는 방법을 알아보았는데, 이번엔 한 플랫폼에서 다른 플랫폼 실행 파일을 크로스 컴파일하는 방법을 알아볼 것이다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-10-26-CMake-Toolchain/chain.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/17-10-26-CMake-Toolchain/chain.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unity로 VR 캐릭터 컨트롤하는 앱 개발하기</title><link href="http://localhost:4000/blog/Unity-VR-Controller/" rel="alternate" type="text/html" title="Unity로 VR 캐릭터 컨트롤하는 앱 개발하기" /><published>2017-10-25T00:00:00+09:00</published><updated>2017-10-25T00:00:00+09:00</updated><id>http://localhost:4000/blog/Unity-VR-Controller</id><content type="html" xml:base="http://localhost:4000/blog/Unity-VR-Controller/"><![CDATA[<h2 id="소개">소개</h2>

<p>이번엔 <a href="https://lklab.github.io/blog/blog/Unity-VR-Support/">지난 글</a>과 <a href="https://lklab.github.io/blog/blog/Unity-Bluetooth-Controller/">저번 글</a>의 내용을 합쳐서 Bluetooth Controller를 통해 1인칭 캐릭터를 컨트롤할 수 있는 VR앱을 만들 것이다.</p>

<h2 id="준비">준비</h2>

<p>Assets Store에서 <a href="https://www.assetstore.unity3d.com/kr/#!/content/15">괜찮은 프로젝트</a>를 받아온다.<br />
- 2018년 11월 현재 위 프로젝트는 서비스되지 않아서 받아올 수 없다.</p>

<p><img src="/blog/assets/post/17-10-25-Unity-VR-Controller/20171024_224745.png" alt="sample project" /></p>

<h2 id="씬-수정">씬 수정</h2>

<p>필요없는 부분은 다 지우고 먼저 1인칭 캐릭터 역할을 할 GameObject를 적당한 위치에 적당한 크기로 하나 만든다.</p>

<p><img src="/blog/assets/post/17-10-25-Unity-VR-Controller/20171026_001652.png" alt="scene view" /></p>

<p><img src="/blog/assets/post/17-10-25-Unity-VR-Controller/20171026_001706.png" alt="inspector" /></p>

<p>벽과 바닥을 뚫고 다니면 안 되니까 Capsule Collider를 추가하고 물리엔진과 상호작용(중력이라던가 다른 물체와 충돌이라던가)을 할 수 있도록 Rigidbody를 추가한다. 중요한게 Rigidbody에서 Constraints안에 Freeze Rotation의 모든 축을 체크해야 한다. 물리엔진에 의해 캐릭터가 회전하지 않도록 제약을 걸어 두는 것으로, 이렇게 하지 않으면 Capsule Collider의 곡면 때문에 캐릭터가 자기 맘대로 막 굴러다닌다.</p>

<p>그 다음엔 캐릭터 GameObject의 하위 Object로 포함되도록 Camera를 추가한다.</p>

<p><img src="/blog/assets/post/17-10-25-Unity-VR-Controller/20171026_003124.png" alt="scene view" /></p>

<p><img src="/blog/assets/post/17-10-25-Unity-VR-Controller/20171026_003150.png" alt="inspector" /></p>

<p>카메라의 위치는 적당히 잡아주면 된다. 단, X와 Z 좌표는 0으로 해 두는 것이 좋다.</p>

<h2 id="스크립트-작성">스크립트 작성</h2>

<p>이제 스크립트를 하나 추가한다.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="p">[</span><span class="nf">RequireComponent</span> <span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">Rigidbody</span><span class="p">))]</span>
<span class="p">[</span><span class="nf">RequireComponent</span> <span class="p">(</span><span class="k">typeof</span> <span class="p">(</span><span class="n">CapsuleCollider</span><span class="p">))]</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">BlueControlManager</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">GameObject</span> <span class="n">cameraObject</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">Rigidbody</span> <span class="n">CharacterRigidbody</span><span class="p">;</span>

    <span class="k">private</span> <span class="kt">bool</span> <span class="n">jumpPushed</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="c1">// contants</span>
    <span class="k">private</span> <span class="kt">float</span> <span class="n">speed</span> <span class="p">=</span> <span class="m">2.2f</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">float</span> <span class="n">gravity</span> <span class="p">=</span> <span class="m">10.0f</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">grounded</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">private</span> <span class="kt">float</span> <span class="n">maxVelocityChange</span> <span class="p">=</span> <span class="m">1.5f</span><span class="p">;</span>

    <span class="k">private</span> <span class="kt">float</span> <span class="n">jumpHeight</span> <span class="p">=</span> <span class="m">0.5f</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">Vector3</span> <span class="n">jumpVelocity</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">cameraObject</span> <span class="p">=</span> <span class="n">GameObject</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">"Camera"</span><span class="p">);</span>
        <span class="n">CharacterRigidbody</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Rigidbody</span><span class="p">&gt;();</span>

        <span class="c1">// From the jump height and gravity we deduce the upwards speed </span>
        <span class="c1">// for the character to reach at the apex.</span>
        <span class="n">jumpVelocity</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Sqrt</span><span class="p">(</span><span class="m">2</span> <span class="p">*</span> <span class="n">jumpHeight</span> <span class="p">*</span> <span class="n">gravity</span><span class="p">),</span> <span class="m">0</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetKeyDown</span><span class="p">(</span><span class="n">KeyCode</span><span class="p">.</span><span class="n">JoystickButton0</span><span class="p">))</span>
            <span class="n">jumpPushed</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">FixedUpdate</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">grounded</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// get joystick data</span>
            <span class="n">Vector2</span> <span class="n">joystickPosition</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">();</span>
            <span class="n">joystickPosition</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span>
            <span class="n">joystickPosition</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">);</span>
            <span class="n">joystickPosition</span> <span class="p">=</span> <span class="n">joystickPosition</span><span class="p">.</span><span class="n">normalized</span><span class="p">;</span>

            <span class="c1">// Calculate how fast we should be moving</span>
            <span class="n">Vector3</span> <span class="n">targetVelocity</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
            <span class="n">Vector3</span> <span class="n">forward</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
            <span class="n">Vector3</span> <span class="n">right</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>

            <span class="n">forward</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">cameraObject</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">forward</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
            <span class="n">forward</span><span class="p">.</span><span class="n">z</span> <span class="p">=</span> <span class="n">cameraObject</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">forward</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
            <span class="n">right</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">cameraObject</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
            <span class="n">right</span><span class="p">.</span><span class="n">z</span> <span class="p">=</span> <span class="n">cameraObject</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">z</span><span class="p">;</span>
            <span class="n">forward</span> <span class="p">=</span> <span class="n">forward</span><span class="p">.</span><span class="n">normalized</span><span class="p">;</span>
            <span class="n">right</span> <span class="p">=</span> <span class="n">right</span><span class="p">.</span><span class="n">normalized</span><span class="p">;</span>
            <span class="n">targetVelocity</span> <span class="p">=</span> <span class="n">forward</span> <span class="p">*</span> <span class="n">joystickPosition</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">right</span> <span class="p">*</span> <span class="n">joystickPosition</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
            <span class="n">targetVelocity</span> <span class="p">*=</span> <span class="n">speed</span><span class="p">;</span>

            <span class="c1">// Apply a force that attempts to reach our target velocity</span>
            <span class="n">Vector3</span> <span class="n">velocity</span> <span class="p">=</span> <span class="n">CharacterRigidbody</span><span class="p">.</span><span class="n">velocity</span><span class="p">;</span>
            <span class="n">Vector3</span> <span class="n">velocityChange</span> <span class="p">=</span> <span class="p">(</span><span class="n">targetVelocity</span> <span class="p">-</span> <span class="n">velocity</span><span class="p">);</span>
            <span class="n">velocityChange</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">velocityChange</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
                <span class="p">-</span><span class="n">maxVelocityChange</span><span class="p">,</span> <span class="n">maxVelocityChange</span><span class="p">);</span>
            <span class="n">velocityChange</span><span class="p">.</span><span class="n">z</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">velocityChange</span><span class="p">.</span><span class="n">z</span><span class="p">,</span>
                <span class="p">-</span><span class="n">maxVelocityChange</span><span class="p">,</span> <span class="n">maxVelocityChange</span><span class="p">);</span>
            <span class="n">velocityChange</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="n">CharacterRigidbody</span><span class="p">.</span><span class="nf">AddForce</span><span class="p">(</span><span class="n">velocityChange</span><span class="p">,</span> <span class="n">ForceMode</span><span class="p">.</span><span class="n">VelocityChange</span><span class="p">);</span>

            <span class="c1">// Jump</span>
            <span class="k">if</span><span class="p">(</span><span class="n">jumpPushed</span><span class="p">)</span>
                <span class="n">CharacterRigidbody</span><span class="p">.</span><span class="nf">AddForce</span><span class="p">(</span><span class="n">jumpVelocity</span><span class="p">,</span> <span class="n">ForceMode</span><span class="p">.</span><span class="n">VelocityChange</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">grounded</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="n">jumpPushed</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
 
    <span class="k">void</span> <span class="nf">OnCollisionStay</span><span class="p">(</span><span class="n">Collision</span> <span class="n">collisionInfo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span><span class="p">(</span><span class="n">ContactPoint</span> <span class="n">contact</span> <span class="k">in</span> <span class="n">collisionInfo</span><span class="p">.</span><span class="n">contacts</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">contact</span><span class="p">.</span><span class="n">normal</span><span class="p">.</span><span class="n">y</span> <span class="p">&gt;</span> <span class="m">0.7f</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">grounded</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>주요 특징</p>

<ol>
  <li>
    <p>UI 처리는 <code class="highlighter-rouge">Update()</code> 함수에서, 물리적 처리는 <code class="highlighter-rouge">FixedUpdate()</code> 함수에서 한다.<br />
<code class="highlighter-rouge">Update()</code> 함수는 프레임마다 한 번 호출되며, 초당 프레임의 변화에 따라 호출 주기가 달라지는 반면 <code class="highlighter-rouge">FixedUpdate()</code> 함수는 호출 주기가 일정하다. <code class="highlighter-rouge">Input.GetKeyDown()</code> 함수는 버튼이 눌린 시점의 프레임에서만 true를 반환한다. 따라서 <code class="highlighter-rouge">FixedUpdate()</code> 함수에서 <code class="highlighter-rouge">Input.GetKeyDown()</code> 함수로 값을 읽어오는 경우 프레임 타이밍에 따라 버튼을 눌러도 <code class="highlighter-rouge">true</code>값을 읽지 못할 수도 있다. 반면에 물리적 처리는 호출 주기가 일정한 <code class="highlighter-rouge">FixedUpdate()</code> 함수에서 처리해야 자연스럽게 동작하며 그렇지 않고 <code class="highlighter-rouge">Update()</code> 함수에서 처리할 경우 초당 프레임 변화에 따라 다르게 동작할 것이다.</p>
  </li>
  <li>
    <p>캐릭터를 움직일 때는 <code class="highlighter-rouge">rigidbody</code>의 <code class="highlighter-rouge">AddForce()</code> 함수 사용<br />
캐릭터를 움직이는 방법, 즉 캐릭터의 위치를 바꾸는 방법은 위치 자체를 바꾸는 방법, 속도를 바꾸는 방법, 힘(가속도)를 주는 방법의 세 가지가 있다. 위치 자체를 바꾸는 것은 캐릭터가 순간이동하는 것으로 구현될 것이며, 속도를 바꾸거나 힘을 주어야 위치가 연속적으로 변할 것이다. 힘을 주는 방법이 위치와 속도가 연속적으로 변하는 것이므로 가장 자연스럽게 동작할 것이다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">grounded</code> (캐릭터가 땅을 밟고 서 있는지) 판단 조건<br />
캐릭터의 Collider가 다른 Collider와 접촉할 때 호출되는 <code class="highlighter-rouge">OnCollisionStay()</code> 함수에서 항상 <code class="highlighter-rouge">grounded</code>를 <code class="highlighter-rouge">true</code>로 바꾸도록 하면 벽과 접촉할 때에도 땅을 밟고 있다고 판단하여 벽타기가 가능하다. 따라서 <code class="highlighter-rouge">OnCollisionStay()</code> 함수의 인자로 주어지는 Collision 정보 내에서 다른 Collider와 접촉한 방향이 옆쪽이 아닌 아래쪽 방향이 있는 경우에만 땅을 밟고 있다고 판단하게 한다.</p>
  </li>
</ol>

<h2 id="플레이-영상">플레이 영상</h2>

<iframe class="video" src="https://www.youtube.com/embed/6hyWDXpkXFM" allowfullscreen="" frameborder="0"></iframe>]]></content><author><name>khlee</name></author><category term="Unity" /><summary type="html"><![CDATA[소개]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-10-25-Unity-VR-Controller/unity_vr_controller.jpg" /><media:content medium="image" url="http://localhost:4000/assets/post/17-10-25-Unity-VR-Controller/unity_vr_controller.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unity VR Support</title><link href="http://localhost:4000/blog/Unity-VR-Support/" rel="alternate" type="text/html" title="Unity VR Support" /><published>2017-10-24T00:00:00+09:00</published><updated>2017-10-24T00:00:00+09:00</updated><id>http://localhost:4000/blog/Unity-VR-Support</id><content type="html" xml:base="http://localhost:4000/blog/Unity-VR-Support/"><![CDATA[<p>화면 출력 관점에서 모바일에서 동작하는 VR 앱을 개발하기 위해서는 화면을 반으로 나누고, 각 화면의 시점(카메라)을 다르게 해서 3D로 보이도록 만들며, 기기의 센서 정보를 이용해 그에 맞게 시점을 회전하는 head tracking 등등이 필요하다.</p>

<p>예전에 처음 Unity를 사용해 VR 앱을 개발할 때에는 센서 값을 읽어오는 플러그인을 넣고, 카메라를 두 개 만든 다음 센서 값에 따라 카메라를 회전하는걸 직접 구현했었는데, 지금은 Unity에서 자동으로 해 준다. 카드보드, 데이드림, 오큘러스 등등의 VR 플랫폼 지원까지 해준다. 관련 내용은 <a href="https://docs.unity3d.com/Manual/VROverview.html">문서</a>에 잘 나와 있다.</p>

<p>이번 글은 Unity에서 다 해주므로. 분량이 없다. Edit -&gt; Project Settings -&gt; Player에 들어가서 원하는 플랫폼에 대해 Virtual Reality Supported에 체크한방 날리고 카드보드인지 아니면 다른 플랫폼인지 선택하면 끝이다.</p>

<p><img src="/blog/assets/post/17-10-24-Unity-VR-Support/20171023_234700.png" alt="player settings" /></p>

<p><img src="/blog/assets/post/17-10-24-Unity-VR-Support/20171023_234901.png" alt="player settings" /></p>

<p>알아서 화면도 나눠주고 렌즈를 통해 보기 편하도록 화면 왜곡도 해 주며 head tracking도 된다.</p>

<p><img src="/blog/assets/post/17-10-24-Unity-VR-Support/Screenshot_20171023-235321.png" alt="demo" /></p>

<p>카드보드를 선택하면 안드로이드 4.4 Kit Kat (API level 19) 부터, 데이드림을 선택하면 안드로이드 7.0 Nougat (API level 24) 부터 앱을 실행할 수 있다.</p>]]></content><author><name>khlee</name></author><category term="Unity" /><summary type="html"><![CDATA[화면 출력 관점에서 모바일에서 동작하는 VR 앱을 개발하기 위해서는 화면을 반으로 나누고, 각 화면의 시점(카메라)을 다르게 해서 3D로 보이도록 만들며, 기기의 센서 정보를 이용해 그에 맞게 시점을 회전하는 head tracking 등등이 필요하다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-10-24-Unity-VR-Support/Screenshot_20171023-235321.png" /><media:content medium="image" url="http://localhost:4000/assets/post/17-10-24-Unity-VR-Support/Screenshot_20171023-235321.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unity에서 Bluetooth Controller 제어</title><link href="http://localhost:4000/blog/Unity-Bluetooth-Controller/" rel="alternate" type="text/html" title="Unity에서 Bluetooth Controller 제어" /><published>2017-10-18T00:00:00+09:00</published><updated>2017-10-18T00:00:00+09:00</updated><id>http://localhost:4000/blog/Unity-Bluetooth-Controller</id><content type="html" xml:base="http://localhost:4000/blog/Unity-Bluetooth-Controller/"><![CDATA[<h2 id="컨트롤러-소개">컨트롤러 소개</h2>

<p>VR 앱을 개발하기 위해 아이페가 PG-9068 TOMAHAWK 모델의 블루투스 컨트롤러를 구입하였다.</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/controller_01.jpeg" alt="controller" class="custom-align-center-img" /></p>

<p>집에 도착한 모습</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/controller_02.jpeg" alt="controller" class="custom-align-center-img" />
<img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/controller_03.jpeg" alt="controller" class="custom-align-center-img" /></p>

<p>Xbox 컨트롤러와 유사한 구조를 갖고 있다.</p>

<h2 id="unity에서-컨트롤러-입력값을-읽어오기">Unity에서 컨트롤러 입력값을 읽어오기</h2>

<p>Unity에서 컨트롤러의 입력값을 읽어오기 위해서는 각 버튼이 어떻게 매핑되어 있는지 알아야 한다. 직접 테스트해본 결과 다음 그림과 같이 매핑되어 있었다.</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/mapping.png" alt="mapping" /></p>

<p>OS와 컨트롤러에 따라 매핑 정보는 달라질 수 있다. 따라서 출시되는 VR 앱에는 이를 잘 파악하여 동적으로 매핑 정보를 파악할 수 있도록 해야 한다.</p>

<p>그림에서 “JoystickButton*” 로 매핑되는 버튼은 Digital 값이고, “*th axis”로 매핑되는 조이스틱이나 버튼은 Analog 값이다. Digital인가 Analog인가에 따라 Unity에서 값을 읽어오는 방식이 다르다.
(LT, RT 버튼은 Digital과 Analog 방식 모두 동작한다.)</p>

<h2 id="digital-입력">Digital 입력</h2>

<p>먼저 Digital 값은 스크립트에서 다음과 같이 쉽게 읽어올 수 있다.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">bool</span> <span class="n">key_value</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetKey</span><span class="p">(</span><span class="n">KeyCode</span><span class="p">.</span><span class="n">JoystickButton0</span><span class="p">);</span></code></pre></figure>

<p><a href="https://docs.unity3d.com/kr/current/ScriptReference/KeyCode.html">Unity reference</a>를 확인해 보면 <code class="highlighter-rouge">KeyCode</code>의 다양한 값을 볼 수 있다. 최대 8개까지의 조이스틱(컨트롤러)를 구분할 수 있으며 각 컨트롤러마다 최대 20개의 버튼을 구분할 수 있다. 이 값을 <code class="highlighter-rouge">Input.GetKey()</code> 함수의 인자로 주면 버튼 값을 <code class="highlighter-rouge">True</code>나 <code class="highlighter-rouge">False</code>로 돌려 준다. 물론 <code class="highlighter-rouge">Input.GetKeyDown()</code> 이나 <code class="highlighter-rouge">Input.GetKeyUp()</code> 등의 다른 함수도 사용할 수 있다.</p>

<h2 id="analog-입력">Analog 입력</h2>

<p>Analog 값은 조금 복잡한데, 우선 스크립트에서 읽는 방법은 다음과 같다. -1.0 ~ 1.0 범위의 값을 얻을 수 있다.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">float</span> <span class="n">key_value</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span></code></pre></figure>

<p><code class="highlighter-rouge">Input.GetAxis()</code> 함수를 사용하는데, 인자로 주는 string은 읽으려는 axis의 이름이다. Unity는 기본적으로 컨트롤러의 첫 번째 조이스틱에 <code class="highlighter-rouge">"Horizontal"</code>, <code class="highlighter-rouge">"Vertical"</code> axis가 매핑되어 있다. 이러한 정보는 Edit -&gt; Project Settings -&gt; Input에서 설정 가능하다.</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/input_settings.png" alt="input settings" /></p>

<p>설정 창을 열게 되면 Inspector에 다음과 같이 InputManager가 보일 것이다.</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/input_manager.png" alt="input manager" /></p>

<p>다양한 Axis 이름들이 정의되어 있는데, 그 중에서 <code class="highlighter-rouge">"Horizontal"</code>, <code class="highlighter-rouge">"Vertical"</code> axis가 미리 정의되어 있는 것을 볼 수 있다. 또 다른 Analog 입력을 추가하고 싶다면 InputManager의 가장 위에 있는 속성인 <code class="highlighter-rouge">Size</code> 값을 늘린 후에 추가된 항목에 값을 채워넣으면 된다.</p>

<p>여기서는 다음과 같이 오른쪽 조이스틱을 입력으로 추가했다.</p>

<p><img src="/blog/assets/post/17-10-18-Unity-Bluetooth-Controller/joystick_settings.png" alt="joystick settings" /></p>

<p>각 속성에 대한 상세한 내용은 <a href="https://docs.unity3d.com/kr/2018.4/Manual/ConventionalGameInput.html">여기</a> 참조</p>

<p>가장 위에 있는 Name 속성에 입력하는 string을 스크립트에서 <code class="highlighter-rouge">Input.GetAxis()</code> 등의 함수에 인자로 사용하여 해당 Analog 입력 값을 받아올 수 있다. Axis 속성에는 앞서 언급했던, 버튼과 조이스틱이 매핑된 axis를 선택하면 된다. 오른쪽 조이스틱은 X 축이 3rd axis에, Y 축이 4th axis에 매핑되어 있다고 했으므로 그에 맞게 설정하였다.</p>]]></content><author><name>khlee</name></author><category term="Unity" /><summary type="html"><![CDATA[컨트롤러 소개]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/post/17-10-18-Unity-Bluetooth-Controller/controller_02.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/post/17-10-18-Unity-Bluetooth-Controller/controller_02.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>